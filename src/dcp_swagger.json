{
  "swagger": "2.0",
  "info": {
    "title": "DCP API",
    "description": "DCP APIs are generally modelled around REST. This documentation contains most of the APIs wesupport. For a full access to all the functionalities, use the DCP python client.",
    "version": "v1"
  },
  "host": "localhost:8000",
  "schemes": [
    "http"
  ],
  "basePath": "/datai-api",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/access-requests/": {
      "get": {
        "operationId": "access-requests_list",
        "summary": "Django rest view for listing access requests and to mark the notifications as read.",
        "description": "Only requests where the logged-in user is either the 'requester' or the 'approver' will be returned",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Request"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "access-requests_create",
        "description": "Django REST view that handles HTTP POST method for marking requests (where logged-in user is either 'requester'\n or 'approver') as READ\n\n:param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/access-requests/unread-count/": {
      "get": {
        "operationId": "access-requests_unread-count_list",
        "summary": "Total unread notifications for current logged-in user (in both requester and approver role)",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/access-requests/{id}/": {
      "get": {
        "operationId": "access-requests_read",
        "summary": "Validate that the object is only viewable by requester or approver",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "access-requests_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "access-requests_partial_update",
        "description": "",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "access-requests"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/bulk-permissions/assign-perm/": {
      "post": {
        "operationId": "bulk-permissions_assign-perm_create",
        "summary": "POST request handler that assigns the given permission\non the given object to the given user or group",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkSourcePermission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkSourcePermission"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "bulk-permissions"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/bulk-permissions/remove-perm/": {
      "post": {
        "operationId": "bulk-permissions_remove-perm_create",
        "summary": "POST request handler that removes the given permission\nfrom the given source to the given user or group",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkSourcePermission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkSourcePermission"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "bulk-permissions"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/change-password/": {
      "post": {
        "operationId": "change-password_create",
        "description": "A view to change password based on the user name and the old password.  This view *does not* log the user\nback into Unifi with the new password.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChangePassword"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "change-password"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/comments/": {
      "get": {
        "operationId": "comments_list",
        "description": "Django rest view for getting all comments.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/comments/{id}/": {
      "get": {
        "operationId": "comments_read",
        "description": "Django rest view for getting and deleting a comment.\nDeleting a parent comment will result in all of its replies deleted as well.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "comments_update",
        "description": "Django rest view for getting and deleting a comment.\nDeleting a parent comment will result in all of its replies deleted as well.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "comments_partial_update",
        "description": "Django rest view for getting and deleting a comment.\nDeleting a parent comment will result in all of its replies deleted as well.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "comments_delete",
        "description": "Django rest view for getting and deleting a comment.\nDeleting a parent comment will result in all of its replies deleted as well.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this comment.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/comments/{id}/feedback/": {
      "post": {
        "operationId": "comments_feedback_create",
        "summary": "Django rest view for toggling like and dislike flags on comments.",
        "description": "Permissions:\n============\nRole permissions based on \"dataset_perms\"/\"transform_job_perms\"/\"os_job_perms\" field,\ndepending on the parent object type.\nAll operations are allowed if the role has object READ permissions, so a mapping from\nPOST method to READ permissions is required.\nUsers with permissions to view the base object can add feedback on the comments.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Flag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Flag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this comment.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/comments/{id}/replies/": {
      "get": {
        "operationId": "comments_replies_list",
        "description": "Django rest view for getting all replies of a given comment.\nNote that only the direct replies will be returned (not nested).",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "comments"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/dafil-objects/": {
      "get": {
        "operationId": "dafil-objects_list",
        "summary": "Django rest view that gets all the DA/FIL objects in unifi.",
        "description": ":cvar queryset: The queryset to use to get objects for the view.\n:cvar serializer_class: Class responsible for serializing to/from python object.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DAFILObject"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "dafil-objects"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/dafil-objects/dafil-parser-out/": {
      "post": {
        "operationId": "dafil-objects_dafil-parser-out_create",
        "description": "Calls the discovery client for column-type detection API\n:param request: Has the column data\n:return: UnifiDatatype as response.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "dafil-objects"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/dashboard/": {
      "get": {
        "operationId": "dashboard_list",
        "description": "Returns a the number of activities that were have finished successfully, failed, were cancelled\nor are still running. \"Cancelled\" and \"Cancelling\" activities are aggregated together.\n\n:param request: the request object\n:return: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "dashboard"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/dashboard/last-30-days/": {
      "get": {
        "operationId": "dashboard_last-30-days_list",
        "summary": "Handles HTTP GET requests for DashboardView last 30 days.",
        "description": ":param request: The request object\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "dashboard"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/": {
      "get": {
        "operationId": "data-sets_list",
        "summary": "List Datasets",
        "description": "Retrieves a list of dataset objects.\n        Required permissions: Role permissions based on \"dataset_perms\" field.\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Dataset"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Datasets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/cluster-info/": {
      "get": {
        "operationId": "data-sets_cluster-info_list",
        "description": "API View to get datasets information belong to a certain cluster",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/columns/": {
      "get": {
        "operationId": "data-sets_columns_list",
        "description": "Django rest view that lists Column objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumnMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/columns/generate-column-synonym/": {
      "get": {
        "operationId": "data-sets_columns_generate-column-synonym_list",
        "description": "Api for column synonym generation, will be used to train auto-mapping model",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/columns/groups/{group_id}/": {
      "get": {
        "operationId": "data-sets_columns_groups_read",
        "description": "Django rest view that creates and lists Column objects in unifi with permission fields\nannotated for the group given as part of the view params ('group_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumnMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/users/{user_id}/": {
      "get": {
        "operationId": "data-sets_columns_users_read",
        "description": "Django rest view that creates and lists Column objects in unifi with permission fields\nannotated for the user given as part of the view params ('user_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumnMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/values/{id}/dependents/": {
      "get": {
        "operationId": "data-sets_columns_values_dependents_list",
        "description": "Django rest view for getting objects dependent on a column value object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{col_id}/values/metadata/attributes/{attribute_name}/": {
      "delete": {
        "operationId": "data-sets_columns_values_metadata_attributes_delete",
        "summary": "Django rest view for deleting a given value attribute and its dependent attribute cells.",
        "description": "Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the column.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "attribute_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{col_id}/values/metadata/attributes/{attribute_name}/dependents/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_attributes_dependents_list",
        "description": "Django rest view for getting objects dependent on a column value attribute object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.\n\n Permissions:\n ============\nRole permissions based on \"metadata_perms\" field.\nAccess is allowed if the role has metadata DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.\nUsers can view the dependents list if they are admins or have permissions on the column",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "attribute_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/": {
      "get": {
        "operationId": "data-sets_columns_read",
        "summary": "Handles HTTP GET request for getting a dataset",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_columns_delete",
        "description": "Django rest view that gets details for dataset column objects",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/assign-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_columns_assign-perm_create",
        "summary": "POST request handler that assigns the given permission on the given dataset column to the\ngiven user or group",
        "description": ":param request: Django request object\n:param pk: dataset column object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/check-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_columns_check-perm_create",
        "summary": "POST request handler that determines if the given user or group has the\ngiven permission on the given source object",
        "description": ":param request: Django request object\n:param pk: column object primary key\n:param perm_name: codename for the permission\n\n:return Django response that indicates whether the requesting user has\nthe given permission on the source object\n\n:rtype :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/dependents/": {
      "get": {
        "operationId": "data-sets_columns_dependents_list",
        "description": "Django rest view for getting objects dependent on a column object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/glossary/": {
      "get": {
        "operationId": "data-sets_columns_glossary_list",
        "description": "Given a dataset column give back all the glossary used",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Glossary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/glossary/assign/": {
      "post": {
        "operationId": "data-sets_columns_glossary_assign_create",
        "summary": "Creates a link between glossary and column",
        "description": ":param request: The request object\n:param pk: The Column object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/glossary/remove/": {
      "post": {
        "operationId": "data-sets_columns_glossary_remove_create",
        "summary": "Deletes the entry that links glossary to object",
        "description": ":param request: The request object\n:param pk: The column object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_glossary_remove_update",
        "description": "Removes the entry in glossary link table for a given dataset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_glossary_remove_partial_update",
        "description": "Removes the entry in glossary link table for a given dataset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/groups-perm/": {
      "get": {
        "operationId": "data-sets_columns_groups-perm_list",
        "description": "GET request handler that lists all the users with annotated fields specifying whether the group\nhas permission on the given column\n\n:param request: Django request object\n:param pk: column object primary key\n:return Django response that indicates whether the requesting user has the given permission on the column object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this group.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/columns/{id}/remove-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_columns_remove-perm_create",
        "summary": "POST request handler that revokes the given permission on the given column from the given\nuser or group",
        "description": ":param request: Django request object\n:param pk: dataset column object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class `rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/statistics/": {
      "get": {
        "operationId": "data-sets_columns_statistics_list",
        "description": "Django REST view that gets the column level statistics objects for a given dataset",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumnStatistics"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/columns/{id}/users-perm/": {
      "get": {
        "operationId": "data-sets_columns_users-perm_list",
        "description": "GET request handler that lists all the users with annotated fields specifying whether the user\nhas permission on the given column\n\n:param request: Django request object\n:param pk: column object primary key\n:return Django response that indicates whether the requesting user has the given permission\non the column object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/csv-files/": {
      "get": {
        "operationId": "data-sets_csv-files_list",
        "description": "Django rest view that lists CsvFile objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CsvFile"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_csv-files_create",
        "description": "Django rest view that lists CsvFile objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFileWithColumns"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFileWithColumns"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/csv-files/column-type": {
      "post": {
        "operationId": "data-sets_csv-files_column-type_create",
        "description": "Calls the discovery client for column-type detection API\n:param request: Has the column data\n:return: UnifiDatatype as response.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/csv-files/{csvfile_pk}/columns/{id}/": {
      "get": {
        "operationId": "data-sets_csv-files_columns_read",
        "description": "Django rest view that gets details, updates and destroys CsvFileColumn objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_csv-files_columns_update",
        "description": "Django rest view that gets details, updates and destroys CsvFileColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_csv-files_columns_partial_update",
        "description": "Django rest view that gets details, updates and destroys CsvFileColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_csv-files_columns_delete",
        "description": "Django rest view that gets details, updates and destroys CsvFileColumn objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "csvfile_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this csv file column.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/csv-files/{id}/": {
      "get": {
        "operationId": "data-sets_csv-files_read",
        "description": "Django rest view that gets details, updates and destroys CsvFile objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFile"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_csv-files_update",
        "description": "Django rest view that gets details, updates and destroys CsvFile objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFile"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_csv-files_partial_update",
        "description": "Django rest view that gets details, updates and destroys CsvFile objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFile"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_csv-files_delete",
        "description": "Django rest view that gets details, updates and destroys CsvFile objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this csv file.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/csv-files/{id}/columns/": {
      "get": {
        "operationId": "data-sets_csv-files_columns_list",
        "description": "Django rest view that creates and lists CsvFileColumn objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CsvFileColumn"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_csv-files_columns_create",
        "description": "Django rest view that creates and lists CsvFileColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CsvFileColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this csv file column.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/csv-files/{id}/sample-data/": {
      "get": {
        "operationId": "data-sets_csv-files_sample-data_list",
        "summary": "Handles GET HTTP requests to get sample CSV data.",
        "description": ":param request: Request object.\n:param args: Not used.\n:param kwargs: Not used.\n\n:type request: :py:class:`django.request.Request`\n:type args: list\n:type kwargs: dict\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/": {
      "get": {
        "operationId": "data-sets_database-tables_list",
        "description": "Django rest view that lists DatabaseTable objects in UNIFi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatabaseTable"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_database-tables_create",
        "description": "Django rest view that lists DatabaseTable objects in UNIFi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/database-tables/{dbtable_pk}/columns/{id}/": {
      "get": {
        "operationId": "data-sets_database-tables_columns_read",
        "description": "Django rest view that gets details, updates and destroys DatabaseColumn objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_database-tables_columns_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_database-tables_columns_partial_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_database-tables_columns_delete",
        "description": "Django rest view that gets details, updates and destroys DatabaseColumn objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dbtable_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{dbtable_pk}/foreign-keys/{id}/": {
      "get": {
        "operationId": "data-sets_database-tables_foreign-keys_read",
        "description": "Django rest view that gets details, updates and destroys DatabaseForeignKey objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_database-tables_foreign-keys_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseForeignKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_database-tables_foreign-keys_partial_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseForeignKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_database-tables_foreign-keys_delete",
        "description": "Django rest view that gets details, updates and destroys DatabaseForeignKey objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dbtable_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{dbtable_pk}/indexes/{id}/": {
      "get": {
        "operationId": "data-sets_database-tables_indexes_read",
        "description": "Django rest view that gets details, updates and destroys DatabaseIndex objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_database-tables_indexes_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseIndex objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_database-tables_indexes_partial_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseIndex objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_database-tables_indexes_delete",
        "description": "Django rest view that gets details, updates and destroys DatabaseIndex objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dbtable_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{dbtable_pk}/primary-key/{id}/": {
      "get": {
        "operationId": "data-sets_database-tables_primary-key_read",
        "description": "Django rest view that gets details, updates and destroys DatabasePrimaryKey objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_database-tables_primary-key_update",
        "description": "Django rest view that gets details, updates and destroys DatabasePrimaryKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_database-tables_primary-key_partial_update",
        "description": "Django rest view that gets details, updates and destroys DatabasePrimaryKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_database-tables_primary-key_delete",
        "description": "Django rest view that gets details, updates and destroys DatabasePrimaryKey objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dbtable_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/": {
      "get": {
        "operationId": "data-sets_database-tables_read",
        "description": "Django rest view that gets details, updates and destroys DatabaseTable objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_database-tables_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseTable objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_database-tables_partial_update",
        "description": "Django rest view that gets details, updates and destroys DatabaseTable objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseTable"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_database-tables_delete",
        "description": "Django rest view that gets details, updates and destroys DatabaseTable objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this database table.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/database-tables/{id}/columns/": {
      "get": {
        "operationId": "data-sets_database-tables_columns_list",
        "description": "Django rest view that lists DatabaseColumn objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatabaseColumn"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_database-tables_columns_create",
        "description": "Django rest view that lists DatabaseColumn objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseColumn"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/foreign-keys/": {
      "get": {
        "operationId": "data-sets_database-tables_foreign-keys_list",
        "description": "Django rest view that lists DatabaseForeignKey objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatabaseForeignKey"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_database-tables_foreign-keys_create",
        "description": "Django rest view that lists DatabaseForeignKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseForeignKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/idc_columns/": {
      "get": {
        "operationId": "data-sets_database-tables_idc_columns_list",
        "summary": ":param request: The request object",
        "description": ":type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/indexes/": {
      "get": {
        "operationId": "data-sets_database-tables_indexes_list",
        "description": "Django rest view that lists DatabaseIndex objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatabaseIndex"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_database-tables_indexes_create",
        "description": "Django rest view that lists DatabaseIndex objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabaseIndex"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/primary-key/": {
      "get": {
        "operationId": "data-sets_database-tables_primary-key_list",
        "description": "Django rest view that lists DatabasePrimaryKey objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatabasePrimaryKey"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_database-tables_primary-key_create",
        "description": "Django rest view that lists DatabasePrimaryKey objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatabasePrimaryKey"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/database-tables/{id}/sample-data/": {
      "get": {
        "operationId": "data-sets_database-tables_sample-data_list",
        "summary": "Method that handles GET HTTP requests and returns sample data for a database table.",
        "description": ":param request: Request object.\n:param args: Not used.\n:param kwargs: Not used.\n\n:type request:\n:type args: list\n:type kwargs: dict\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/endorsements/": {
      "get": {
        "operationId": "data-sets_endorsements_list",
        "description": "Django rest view that lists the current endorsement for each dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetEndorsementStatus"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/endorsements/{id}/": {
      "get": {
        "operationId": "data-sets_endorsements_read",
        "description": "Django rest view that retrieves the an endorsement by its id.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this dataset endorsement.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/groups/{group_id}/": {
      "get": {
        "operationId": "data-sets_groups_read",
        "description": "Django rest view that creates and lists Dataset objects in unifi with permission fields annotated for\nthe user given as part of the view params ('group_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/next-batch-cluster/": {
      "get": {
        "operationId": "data-sets_next-batch-cluster_list",
        "description": "retrieve next cluster id\n:param request:  The request object\n:return:  :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/next-cluster/": {
      "get": {
        "operationId": "data-sets_next-cluster_list",
        "description": "retrieve next cluster id\n:param request:  The request object\n:return:  :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/random-cluster": {
      "get": {
        "operationId": "data-sets_random-cluster_list",
        "description": "retrieve random cluster id\n:param request:  The request object\n:return:  :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/recently-viewed/": {
      "get": {
        "operationId": "data-sets_recently-viewed_list",
        "description": "Django rest view that lists the N recently viewed Dataset objects by the logged in user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/restore-cluster/": {
      "get": {
        "operationId": "data-sets_restore-cluster_list",
        "description": "retrieve random cluster id\n:param request:  The request object\n:return:  :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/similarity-model-status/": {
      "get": {
        "operationId": "data-sets_similarity-model-status_list",
        "description": "API View to check if the recommend model has been retrained",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/statistics-activities/": {
      "get": {
        "operationId": "data-sets_statistics-activities_list",
        "description": "Django REST view for dataset statistics activity list.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetStatisticsActivityList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/statistics-activities/latest/": {
      "get": {
        "operationId": "data-sets_statistics-activities_latest_list",
        "description": "Django REST view for Dataset Statistics Activity Dashboard.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetStatisticsActivityList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/statistics-activities/{id}/": {
      "get": {
        "operationId": "data-sets_statistics-activities_read",
        "description": "Django REST view that gets/delete a dataset statistics activity.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetStatisticsActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_statistics-activities_delete",
        "description": "Django REST view that gets/delete a dataset statistics activity.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/statistics-activities/{id}/cancel/": {
      "get": {
        "operationId": "data-sets_statistics-activities_cancel_list",
        "summary": "Given a dataset statistics activity ID, cancel the execution of the activity",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.DatasetStatisticsActivity`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/tags/": {
      "get": {
        "operationId": "data-sets_tags_list",
        "description": "Django rest view that gets a summary of tags used by datasets and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/upload-file/": {
      "post": {
        "operationId": "data-sets_upload-file_create",
        "description": "APIView for uploading a local file as a dataset.\nThe file will be uploaded to UNIFI_SYSTEM_HDFS, and the user needs to have permissions to upload to that source.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sets/users/{user_id}/": {
      "get": {
        "operationId": "data-sets_users_read",
        "description": "Django rest view that creates and lists Dataset objects in unifi with permission fields annotated for\nthe user given as part of the view params ('user_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{dataset_pk}/lineage/": {
      "get": {
        "operationId": "data-sets_lineage_list",
        "description": "DRF view for retrieving a list of lineages where the dataset was an output target",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LineageMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dataset_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/metadata/": {
      "get": {
        "operationId": "data-sets_columns_metadata_list",
        "description": "Django rest view for listing column metadata\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/metadata/attributes/{attribute_name}/": {
      "delete": {
        "operationId": "data-sets_columns_metadata_attributes_delete",
        "description": "Django rest view for deleting a given column attribute and its dependent attribute cells\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the dataset.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "attribute_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/metadata/attributes/{attribute_name}/dependents/": {
      "get": {
        "operationId": "data-sets_columns_metadata_attributes_dependents_list",
        "description": "Django rest view for getting objects dependent on a column attribute object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "attribute_name",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/metadata/": {
      "get": {
        "operationId": "data-sets_columns_metadata_list",
        "summary": "Retrieve column metadata corresponding to a particular column",
        "description": "Sample response would look like:\n {\n     'id': 1, <----- column id\n     'attributes': [\n         {\n             'id': 1, <---- cell (attribute) id\n             'attribute_name': 'description',\n             'data': 'key',\n             'scorable': False,\n             'editable': True,\n             'agg_score': None,\n             'user_score': None,\n             'total_votes': 0,\n             'vote_details': []\n         },\n         {\n             'id': 2,\n             'attribute_name': 'long_description',\n             'data': \"Unique customer key assigned to each customer. It is a value auto generated by the system.\",\n             'scorable': True,\n             'editable': True,\n             'agg_score': 4.5,\n             'user_score': 5,\n             'total_votes': 2\n             'vote_details': [\n                {\n                    'firstname': Diana\n                    'lastname': Davidson\n                    'score': 4\n                },\n                {\n                    'firstname': Adrian,\n                    'lastname': Anderson,\n                    'score': 5\n                }\n               ]\n         }\n     ],\n     'score': 4.5 <---- average of attribute agg_scores\n }\n:param: request: The request object\n:param: ds_id: The dataset id\n:param: col_id: The column id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/metadata/attributes/": {
      "get": {
        "operationId": "data-sets_columns_metadata_attributes_list",
        "description": "Django rest view for creating and listing attributes of a columns metadata view for all\n   all columns of a particular dataset\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset. Only admins or owners\ncan create new attributes.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Attributes"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_columns_metadata_attributes_create",
        "summary": "Django REST view that handles HTTP POST requests to create new Column attribute.\nds_id is an expected param in kwargs",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attributes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Attributes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/metadata/attributes/{col_cell_id}/": {
      "get": {
        "operationId": "data-sets_columns_metadata_attributes_read",
        "description": "Retrieve details of a particular column attribute\n A sample response:\n {\n   'id': 2, <--- cell (attribute) id\n   'attribute_name': 'long_description',\n   'data': \"Unique customer key assigned to each customer. It is a value auto generated by the system.\",\n   'scorable': True,\n   'editable': True,\n   'agg_score': 4.5,\n   'user_score': 5,\n   'total_votes': 2\n   'vote_details': [\n    {\n      'firstname': Diana\n      'lastname': Davidson\n      'score': 4\n    },\n    {\n      'firstname': Adrian,\n      'lastname': Anderson,\n      'score': 5\n    }\n  ]\n }\n\n:param: request: The request object\n:param: ds_id: The dataset id\n:param: col_id: The column id\n:param: col_cell_id: The ColumnMetadataCell id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n:type: col_cell_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_metadata_attributes_update",
        "description": "Django rest view for listing metadata of a particular column-attribute (cell)\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_metadata_attributes_partial_update",
        "description": "Django rest view for listing metadata of a particular column-attribute (cell)\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_cell_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/metadata/attributes/{col_cell_id}/score/": {
      "get": {
        "operationId": "data-sets_columns_metadata_attributes_score_read",
        "description": "Retrieve score data corresponding to a particular column-attribute (cell)\n A sample response would look like:\n {\n   'agg_score': 4.5, <----- average of all user votes\n   'user_score': 5,\n   'total_votes': 2\n   'vote_details': [\n    {\n      'firstname': Diana\n      'lastname': Davidson\n      'score': 4\n    },\n    {\n      'firstname': Adrian,\n      'lastname': Anderson,\n      'score': 5\n    }\n   ]\n }\n\n:param: request: The request object\n:param: ds_id: The Dataset id\n:param: col_id: The DatasetColumn id\n:param: col_cell_id: The ColumnMetadataCell id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n:type: col_cell_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_columns_metadata_attributes_score_create",
        "description": "Django rest view for creating, updating and listing score details of a particular column attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_metadata_attributes_score_update",
        "description": "Django rest view for creating, updating and listing score details of a particular column attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_metadata_attributes_score_partial_update",
        "description": "Django rest view for creating, updating and listing score details of a particular column attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_cell_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/": {
      "get": {
        "operationId": "data-sets_columns_values_list",
        "description": "Django rest view that creates and lists values of a particular column.\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ColumnValue"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_columns_values_create",
        "summary": "Django REST view that handles HTTP POST requests to create new Value for a column.\nds_id is an expected param in kwargs",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/metadata/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_list",
        "description": "Django rest view for listing column values metadata\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/{val_id}/": {
      "get": {
        "operationId": "data-sets_columns_values_read",
        "description": "Django rest view that retrieves, updates and deletes details of a particular column value.\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the dataset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_values_update",
        "description": "Django rest view that retrieves, updates and deletes details of a particular column value.\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_values_partial_update",
        "description": "Django rest view that retrieves, updates and deletes details of a particular column value.\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ColumnValue"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_columns_values_delete",
        "description": "Django rest view that retrieves, updates and deletes details of a particular column value.\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or owners who have permissions on the dataset.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/{val_id}/metadata/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_list",
        "summary": "Retrieve metadata corresponding to a particular column value",
        "description": "Sample response would look like:\n{\n    'id': 2, <----- value id\n    'attributes': [\n        {\n            'id': 3, <---- cell (attribute) id\n            'attribute_name': 'description',\n            'data': 'Auto category',\n            'scorable': False,\n            'editable': True,\n            'agg_score': None,\n            'user_score': None,\n            'total_votes': 0,\n            'vote_details': []\n        },\n        {\n            'id': 4,\n            'attribute_name': 'long_description',\n            'data': \"Market segments that fall into the automobile category are designated with the 'AUTOMOBILE' value\",\n            'scorable': True,\n            'editable': True,\n            'agg_score': 4.5,\n            'user_score': 5,\n            'total_votes': 2\n            'vote_details': [\n                {\n                    'firstname': Diana\n                    'lastname': Davidson\n                    'score': 4\n                },\n                {\n                    'firstname': Adrian,\n                    'lastname': Anderson,\n                    'score': 5\n                }\n              ]\n        }\n    ],\n    'score': 4.5 <---- average of attribute agg_scores\n}\n:param: request: The request object\n:param: ds_id: The dataset id\n:param: col_id: The column id\n:param: val_id: The value id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n:type: val_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/{val_id}/metadata/attributes/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_attributes_list",
        "description": "Django rest view for listing and creating attributes of a particular column value\n Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset. Only admins or owners\ncan create new attributes.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Attributes"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_columns_values_metadata_attributes_create",
        "description": "Django REST view that handles HTTP POST requests to create new value attribute.\nds_id and col_id are expected params in kwargs\n\n:param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attributes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Attributes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/{val_id}/metadata/attributes/{val_cell_id}/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_attributes_read",
        "summary": "Retrieve metadata corresponding to a particular value-attribute (cell)",
        "description": "The response would look like:\n{\n  'id': 2, <--- cell (attribute) id\n  'attribute_name': 'long_description',\n  'data': \"Market segments that fall into the building category are designated with the 'BUILDING' value\",\n  'scorable': True,\n  'editable': True,\n  'agg_score': 4.5,\n  'user_score': 5,\n  'total_votes': 2\n  'vote_details': [\n    {\n        'firstname': Diana\n        'lastname': Davidson\n        'score': 4\n    },\n    {\n        'firstname': Adrian,\n        'lastname': Anderson,\n        'score': 5\n    }\n   ]\n}\n\n:param: request: The request object\n:param: ds_id: The Dataset id\n:param: col_id: The DatasetColumn id\n:param: val_id: The ColumnValue id\n:param: val_cell_id: The ValueMetadataCell id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n:type: val_id: int\n:type: val_cell_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_values_metadata_attributes_update",
        "summary": "Django rest view for listing metadata details of a particular value attribute",
        "description": "Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_values_metadata_attributes_partial_update",
        "summary": "Django rest view for listing metadata details of a particular value attribute",
        "description": "Permissions:\n============\nRole permissions based on \"metadata_perms\" fields.\nAccess only for admins, or users who have permissions on the dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AttributesData"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_cell_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_id}/columns/{col_id}/values/{val_id}/metadata/attributes/{val_cell_id}/score/": {
      "get": {
        "operationId": "data-sets_columns_values_metadata_attributes_score_read",
        "summary": "Retrieve score details corresponding to a particular value",
        "description": "The response would look like:\n{\n  'agg_score': 4.5, <----- average of all user votes\n  'user_score': 5,\n  'total_votes': 2\n  'vote_details': [\n    {\n        'firstname': Diana\n        'lastname': Davidson\n        'score': 4\n    },\n    {\n        'firstname': Adrian,\n        'lastname': Anderson,\n        'score': 5\n    }\n   ]\n}\n\n:param: request: The request object\n:param: ds_id: The Dataset id\n:param: col_id: The DatasetColumn id\n:param: val_id: The ColumnValue id\n:param: val_cell_id: The ValueMetadataCell id\n\n:type: request: :py:class:`django.request.Request`\n:type: ds_id: int\n:type: col_id: int\n:type: val_id: int\n:type: val_cell_id: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_columns_values_metadata_attributes_score_create",
        "description": "Django rest view for creating and listing score details of a particular value attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_columns_values_metadata_attributes_score_update",
        "description": "Django rest view for creating and listing score details of a particular value attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_columns_values_metadata_attributes_score_partial_update",
        "description": "Django rest view for creating and listing score details of a particular value attribute",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueMetadataCellVotes"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "col_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "ds_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_cell_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "val_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{ds_pk}/columns/": {
      "get": {
        "operationId": "data-sets_columns_list",
        "description": "Django rest view that lists DatasetColumn objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumn"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "ds_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/": {
      "get": {
        "operationId": "data-sets_read",
        "summary": "Handles HTTP GET request for getting a dataset",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_delete",
        "description": "Django rest view that gets details for dataset objects",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/access-request/": {
      "get": {
        "operationId": "data-sets_access-request_list",
        "summary": "Django REST view that handles HTTP GET requests to fetch the access request status",
        "description": "Return the status of request if one exists already otherwise return None\n\n:param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Request"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_access-request_create",
        "summary": "Django REST view that handles HTTP POST requests for requesting access to a dataset",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/assign-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_assign-perm_create",
        "summary": "POST request handler that assigns the given permission\non the given dataset to the given user or group",
        "description": ":param request: Django request object\n:param pk: dataset object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/check-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_check-perm_create",
        "summary": "POST request handler that determines if the given user or group has the\ngiven permission on the given source object",
        "description": ":param request: Django request object\n:param pk: dataset object primary key\n:param perm_name: codename for the permission\n\n:return Django response that indicates whether the requesting user has\nthe given permission on the source object\n\n:rtype :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/cluster/": {
      "get": {
        "operationId": "data-sets_cluster_list",
        "description": "Computes feature set for the dataset ID provided and similar datasets are gotten back.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/comments/": {
      "get": {
        "operationId": "data-sets_comments_list",
        "description": "Django rest view for getting and creating comments on a dataset object.\nThis view is used to create a comment and to show all parent comments on a given dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_comments_create",
        "description": "Django rest view for getting and creating comments on a dataset object.\nThis view is used to create a comment and to show all parent comments on a given dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/comments/users/": {
      "get": {
        "operationId": "data-sets_comments_users_list",
        "description": "Django rest view for getting user list of participants who wrote comments on a dataset object.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/dependents/": {
      "get": {
        "operationId": "data-sets_dependents_list",
        "description": "Django rest view for getting objects dependent on a dataset object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.\nAccess is allowed if the role has dataset DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/endorsement/": {
      "get": {
        "operationId": "data-sets_endorsement_read",
        "description": "Rather than return a 404 if there's no associated endorsement, return a fake\nresponse with empty fields and No Endorsement state. This does mean, however,\nthat the end consumer won't know if it should patch or post, so support both.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_endorsement_create",
        "description": "Django rest view for creating and getting the details of the dataset endorsement for a given dataset.\nAny given Dataset may have zero or more DatasetEndorsement, and exactly 1 current endorsement.\nendorsement state is defined in the model:\n    ('NE', 'Not Endorsed'),\n    ('TR', 'Trusted'),\n    ('DE', 'Deprecated'),",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_endorsement_update",
        "description": "Django rest view for creating and getting the details of the dataset endorsement for a given dataset.\nAny given Dataset may have zero or more DatasetEndorsement, and exactly 1 current endorsement.\nendorsement state is defined in the model:\n    ('NE', 'Not Endorsed'),\n    ('TR', 'Trusted'),\n    ('DE', 'Deprecated'),",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_endorsement_partial_update",
        "description": "Django rest view for creating and getting the details of the dataset endorsement for a given dataset.\nAny given Dataset may have zero or more DatasetEndorsement, and exactly 1 current endorsement.\nendorsement state is defined in the model:\n    ('NE', 'Not Endorsed'),\n    ('TR', 'Trusted'),\n    ('DE', 'Deprecated'),",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatasetEndorsement"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/endorsement/history/": {
      "get": {
        "operationId": "data-sets_endorsement_history_list",
        "description": "Django rest view that lists the dataset endorsement history.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetEndorsement"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/glossary/": {
      "get": {
        "operationId": "data-sets_glossary_list",
        "description": "Given a dataset give back all the glossary used",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Glossary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/glossary/assign/": {
      "post": {
        "operationId": "data-sets_glossary_assign_create",
        "summary": "Creates a new entry in the Glossary link table with a dataset.",
        "description": ":param request: The request object\n:param pk: The Dataset object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/glossary/remove/": {
      "post": {
        "operationId": "data-sets_glossary_remove_create",
        "summary": "Deletes the entry that links glossary to object",
        "description": ":param request: The request object\n:param pk: The dataset object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sets_glossary_remove_update",
        "description": "Removes the entry in glossary link table for a given dataset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sets_glossary_remove_partial_update",
        "description": "Removes the entry in glossary link table for a given dataset.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/groups-perm/": {
      "get": {
        "operationId": "data-sets_groups-perm_list",
        "description": "GET request handler that lists all the groups with annotated fields specifying whether the group\nhas permissions on the given dataset\n\n:param request: Django request object\n:param pk: source object primary key\n:return Django response that indicates whether the requesting user has the given permission on the source object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this group.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/{id}/impacted/": {
      "get": {
        "operationId": "data-sets_impacted_list",
        "description": "Django rest view for getting objects impacted by a dataset object.\nThis view is used before deleting an object, to show its impacted objects\nbefore verifying deletion.\nAccess is allowed if the role has dataset DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/jira-references/{jira_reference_id}/": {
      "post": {
        "operationId": "data-sets_jira-references_create",
        "summary": "POST request handler that adds a jira reference id to a given object.\nThe input includes the jira_reference_id to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_jira-references_delete",
        "description": "DELETE request handler that removes a jira reference from a given object.\nThe input includes the jira_reference_id to remove.\n\n:param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "jira_reference_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/jobs/": {
      "get": {
        "operationId": "data-sets_jobs_list",
        "description": "Django rest view queries jobs to check if dataset is being used, and responds\nwith a unifi jobs queryset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Job"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sets_jobs_create",
        "description": "Django rest view queries jobs to check if dataset is being used, and responds\nwith a unifi jobs queryset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/load-graph/": {
      "get": {
        "operationId": "data-sets_load-graph_list",
        "description": "Enables async graph loading of all the columns and metadata,including the given dataset.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/pii-recommendation/": {
      "get": {
        "operationId": "data-sets_pii-recommendation_list",
        "description": "API view to recommend pii columns over an incoming dataset ID",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/remove-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sets_remove-perm_create",
        "summary": "POST request handler that revokes the given permission\non the given dataset from the given user or group",
        "description": ":param request: Django request object\n:param pk: dataset object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class `rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/similar-datasets/": {
      "get": {
        "operationId": "data-sets_similar-datasets_list",
        "description": "API view to get similar datasets given a incoming dataset ID",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/statistics-activities/": {
      "post": {
        "operationId": "data-sets_statistics-activities_create",
        "summary": "Triggers the stats job for CSV or database datasets.",
        "description": ":param request: The request object\n:param pk: dataset id\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerDatasetStatistics"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TriggerDatasetStatistics"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this dataset.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sets/{id}/statistics/": {
      "get": {
        "operationId": "data-sets_statistics_list",
        "description": "Django REST view that gets the dataset level statistics objects for a given dataset",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetStatistics"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/stats/dependents/": {
      "get": {
        "operationId": "data-sets_stats_dependents_list",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/tag-recommendation/": {
      "get": {
        "operationId": "data-sets_tag-recommendation_list",
        "description": "API View for getting tag recommendations given a dataset",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "data-sets_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sets_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sets/{id}/users-perm/": {
      "get": {
        "operationId": "data-sets_users-perm_list",
        "description": "GET request handler that lists all the users with annotated fields specifying whether the user\nhas permission on the given dataset\n\n:param request: Django request object\n:param pk: source object primary key\n:return Django response that indicates whether the requesting user has the given permission on the source object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sets"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sources/": {
      "get": {
        "operationId": "data-sources_list",
        "description": "Django rest view that creates and lists Source objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Source"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sources_create",
        "description": "Django rest view that creates and lists Source objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/groups/{group_id}/": {
      "get": {
        "operationId": "data-sources_groups_read",
        "description": "Django rest view that lists all the sources in the metastore with permission fields annotated for\nthe group given as part of the view params ('group_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Source"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-activities/": {
      "get": {
        "operationId": "data-sources_import-activities_list",
        "description": "Django rest view that returns all the import activities",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceImportActivity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/import-activities/latest/": {
      "get": {
        "operationId": "data-sources_import-activities_latest_list",
        "description": "Django rest view that returns latest import activities",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceImportActivity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/import-activities/{id}/": {
      "get": {
        "operationId": "data-sources_import-activities_read",
        "description": "Django rest view that returns import activity details for a given activity id or deletes it",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sources_import-activities_delete",
        "description": "Django rest view that returns import activity details for a given activity id or deletes it",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-activities/{id}/dependents/": {
      "get": {
        "operationId": "data-sources_import-activities_dependents_list",
        "description": "Django rest view for getting objects dependent on a source import activity object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/": {
      "get": {
        "operationId": "data-sources_import-schedules_list",
        "description": "Django rest view that creates and lists import schedules for all data sources",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceImportSchedule"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-sources_import-schedules_create",
        "description": "Django rest view that creates and lists import schedules for all data sources",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/import-schedules/plan/{timestamp}/": {
      "get": {
        "operationId": "data-sources_import-schedules_plan_read",
        "description": "Django rest view that lists source import schedules to be executed on the upcoming 24 hours starting\nfrom a given timestamp. response includes start times.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "timestamp",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/tags/": {
      "get": {
        "operationId": "data-sources_import-schedules_tags_list",
        "description": "Django rest view that gets a summary of tags used by data source import metadata schedule and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/import-schedules/{id}/": {
      "get": {
        "operationId": "data-sources_import-schedules_read",
        "description": "Django rest view that gets, updates and deletes import schedules for a source",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sources_import-schedules_update",
        "description": "Django rest view that gets, updates and deletes import schedules for a source",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sources_import-schedules_partial_update",
        "description": "Django rest view that gets, updates and deletes import schedules for a source",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sources_import-schedules_delete",
        "description": "Django rest view that gets, updates and deletes import schedules for a source",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/{id}/dependents/": {
      "get": {
        "operationId": "data-sources_import-schedules_dependents_list",
        "description": "Django rest view for getting objects dependent on a source import schedule object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/{id}/execute/": {
      "get": {
        "operationId": "data-sources_import-schedules_execute_list",
        "description": "Handles HTTP GET request for source import schedule execution.\n:param request: The request object\n:param pk: The :py:class:`api.models.SourceImportSchedule` ID field\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "data-sources_import-schedules_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sources_import-schedules_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/import-schedules/{schedule_id}/activities/": {
      "get": {
        "operationId": "data-sources_import-schedules_activities_list",
        "description": "Django rest view that lists returns a paginated list of all import activities for a given schedule id",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceImportActivity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "schedule_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/tags/": {
      "get": {
        "operationId": "data-sources_tags_list",
        "description": "Django rest view that gets a summary of tags used by sources and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-sources/users/{user_id}/": {
      "get": {
        "operationId": "data-sources_users_read",
        "description": "Django rest view that lists all the sources in the metastore with permission fields annotated for\nthe user given as part of the view params ('user_id')",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Source"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/": {
      "get": {
        "operationId": "data-sources_read",
        "description": "Django rest view that gets details, updates and destroys Source objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sources_update",
        "description": "Django rest view that gets details, updates and destroys Source objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sources_partial_update",
        "description": "Django rest view that gets details, updates and destroys Source objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Source"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sources_delete",
        "description": "Django rest view that gets details, updates and destroys Source objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/assign-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sources_assign-perm_create",
        "summary": "POST request handler that assigns the given permission\non the given source to the given user or group",
        "description": ":param request: Django request object\n:param pk: source object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/check-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sources_check-perm_create",
        "summary": "GET request handler that determines if the given user or group has the\ngiven permission on the given source object",
        "description": ":param request: Django request object\n:param pk: source object primary key\n:param perm_name: codename for the permission\n\n:return Django response that indicates whether the requesting user has\nthe given permission on the source object\n\n:rtype :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/databases/": {
      "get": {
        "operationId": "data-sources_databases_list",
        "description": ":return:",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/db-schema-browser/": {
      "get": {
        "operationId": "data-sources_db-schema-browser_list",
        "summary": ":param request: The request object",
        "description": ":type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/dependents/": {
      "get": {
        "operationId": "data-sources_dependents_list",
        "description": "Django rest view for getting objects dependent on a source object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-browser/": {
      "get": {
        "operationId": "data-sources_file-browser_list",
        "summary": ":param request: The request object\n:param pk: The :py:class:`api.models.Source` id field",
        "description": ":type request: :py:class:`django.request.Request`\n:param pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/": {
      "get": {
        "operationId": "data-sources_file-info_list",
        "summary": ":param request: The request object",
        "description": ":type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/column/statistics/": {
      "get": {
        "operationId": "data-sources_file-info_column_statistics_list",
        "description": "Gets the column statistics in the dataset create flow",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/desc-path/": {
      "get": {
        "operationId": "data-sources_file-info_desc-path_list",
        "summary": ":param request: The request object",
        "description": ":type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/statistics-activities/": {
      "post": {
        "operationId": "data-sources_file-info_statistics-activities_create",
        "description": "Triggers sample stats for a dataset in the create flow",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerSourceFileInfoStatistics"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TriggerSourceFileInfoStatistics"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/statistics-activity/": {
      "get": {
        "operationId": "data-sources_file-info_statistics-activity_read",
        "description": "Gets the status of the statistics job in the dataset create flow",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/file-info/statistics/": {
      "get": {
        "operationId": "data-sources_file-info_statistics_list",
        "description": "Gets the dataset level statistics in the dataset create flow",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/glossary/": {
      "get": {
        "operationId": "data-sources_glossary_list",
        "description": "Given a source give back all the glossary used",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Glossary"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/glossary/assign/": {
      "post": {
        "operationId": "data-sources_glossary_assign_create",
        "summary": "Creates a link between glossary and column",
        "description": ":param request: The request object\n:param pk: The Source object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/glossary/remove/": {
      "post": {
        "operationId": "data-sources_glossary_remove_create",
        "summary": "Deletes the entry that links glossary to object",
        "description": ":param request: The request object\n:param pk: The Source object ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "data-sources_glossary_remove_update",
        "description": "Remove the entry that links the glossary to a source",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "data-sources_glossary_remove_partial_update",
        "description": "Remove the entry that links the glossary to a source",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/groups-perm/": {
      "get": {
        "operationId": "data-sources_groups-perm_list",
        "description": "GET request handler that responds whether the user has the given permission on the data source object\nIn case pk is -1, check permissions on system hdfs source id.\n\n:param request: Django request object\n:param pk: source object primary key\n:return Django response that indicates whether the requesting user has the given permission on the source object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this group.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sources/{id}/import-metadata/": {
      "post": {
        "operationId": "data-sources_import-metadata_create",
        "description": "Submits the metadata import task for a :py:class:`api.models.Source` to Celery for database and file sources\nimport and also for file dataset imports. Checks the required permissions in the respective cases, and carries\nout the requested operation.\nalso imports tableau sources\n\n:param request: The request object\n:param pk: The Source objects ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/load-graph/": {
      "get": {
        "operationId": "data-sources_load-graph_list",
        "description": "Enables async graph loading of all the datasets, columns and metadata, including the given source.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/oauth-init/": {
      "get": {
        "operationId": "data-sources_oauth-init_list",
        "description": "Submits an authentication task for a :py:class:`api.models.Source` to Celery.\nBefore starting the authentication, checks if the task is underway.\nReturns the temporary url needed to complete the authentication, or null.\nIn case of error return error message.\n\n:param request: The request object\n:param pk: The Source objects ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/oauth-needed/": {
      "get": {
        "operationId": "data-sources_oauth-needed_list",
        "description": "APIView for checking if OAuth is needed",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/oauth-status/": {
      "get": {
        "operationId": "data-sources_oauth-status_list",
        "summary": "Returns the authentication status for a :py:class:`api.models.Source` to Celery.",
        "description": ":param request: The request object\n:param pk: The Source objects ID\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/remove-perm/{perm_name}/": {
      "post": {
        "operationId": "data-sources_remove-perm_create",
        "summary": "POST request handler that revokes the given permission\non the given source from the given user or group",
        "description": ":param request: Django request object\n:param pk: source object primary key\n:param perm_name: codename for the permission\n:return: Django response that indicates the status of the request\n:rtype: :py:class `rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "perm_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/table-browser/": {
      "get": {
        "operationId": "data-sources_table-browser_list",
        "summary": ":param request: The request object\n:param pk: The :py:class:`api.models.Source` id field",
        "description": ":type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "data-sources_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-sources_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{id}/users-perm/": {
      "get": {
        "operationId": "data-sources_users-perm_list",
        "description": "GET request handler that responds whether the user has the given permission on the data source object\nIn case pk is -1, check permissions on system hdfs source id.\n\n:param request: Django request object\n:param pk: source object primary key\n:return Django response that indicates whether the requesting user has the given permission on the source object\n:rtype :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserObjectPermission"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/data-sources/{id}/validate-connection/": {
      "get": {
        "operationId": "data-sources_validate-connection_list",
        "description": "Django rest view that verifies a source connection is up and accessible - or in other words\nit is currently usable as defined. Possible responses:\n- 200 + success == True : operation succeeded ; validation succeeded (GREEN).\n- 200 + success == False: operation succeeded ; validation failed (RED). reason in 'details'.\n- 404                   : operation failed    ; passed in source does not exist (YELLOW)\n- 500                   : operation failed    ; internal error. reason in 'details' (YELLOW).",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{source_id}/import-activities/": {
      "get": {
        "operationId": "data-sources_import-activities_list",
        "description": "Django rest view that returns list of all of import activities for a source",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceImportActivity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "source_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{source_id}/import-schedule/": {
      "get": {
        "operationId": "data-sources_import-schedule_read",
        "description": "Django rest view that gets details of import schedule for a source",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceImportSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "source_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{source_pk}/properties/": {
      "get": {
        "operationId": "data-sources_properties_list",
        "description": "Django rest view that lists and creates SourceProperty objects for a data source in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SourceProperty"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "source_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-sources/{source_pk}/properties/{key}/": {
      "get": {
        "operationId": "data-sources_properties_read",
        "description": "Django rest view that gets details of SourceProperty objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SourceProperty"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-sources"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "key",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "source_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-types/": {
      "get": {
        "operationId": "data-types_list",
        "description": "Django rest view that gives all data types implemented by all the plugins",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExecutorDataType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "data-types_create",
        "description": "Django rest view that gives all data types implemented by all the plugins",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-types/tags/": {
      "get": {
        "operationId": "data-types_tags_list",
        "description": "Django rest view that gets a summary of tags used by plugin data types and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/data-types/{id}/": {
      "get": {
        "operationId": "data-types_read",
        "description": "Django rest view that gives data types for the given plugin id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-types_delete",
        "description": "Django rest view that gives data types for the given plugin id",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-types/{id}/dependents/": {
      "get": {
        "operationId": "data-types_dependents_list",
        "description": "Django rest view for getting objects dependent on a executor data type.\n    This view is used before deleting an object, to show its dependent objects\n    before verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/data-types/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "data-types_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "data-types_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "data-types"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/datastore-adapters/": {
      "get": {
        "operationId": "datastore-adapters_list",
        "summary": "List DatastoreAdapters",
        "description": "Retrieves a list of installed DatastoreAdapter objects on the DCP instance.\nRequired permissions: Role permissions based on \"adapter_perms\" field.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatastoreAdapter"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "datastore-adapters_create",
        "summary": "Create Datastore Adapter",
        "description": "Create a datstore adapter on the DCP instance.\nRequired permissions: Role permissions based on \"adapter_perms\" field.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/datastore-adapters/{id}/": {
      "get": {
        "operationId": "datastore-adapters_read",
        "summary": "Get datastore adapter",
        "description": "Retrieves an existing datastore adapter by its id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "datastore-adapters_update",
        "summary": "Update datastore adapter",
        "description": "Updates an existing datastore adapter by adding or modifying the given fields",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "datastore-adapters_partial_update",
        "description": "Django rest view that gets details, and updates DatastoreAdapter objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatastoreAdapter"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "datastore-adapters_delete",
        "summary": "Delete datastore adapter",
        "description": "Deletes an existing datastore adapter and all its dependents",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this datastore adapter.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/datastores/": {
      "get": {
        "operationId": "datastores_list",
        "description": "Django rest view that creates and lists Datastore objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Datastore"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "datastores_create",
        "description": "Django rest view that creates and lists Datastore objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/datastores/{datastore_pk}/properties/": {
      "get": {
        "operationId": "datastores_properties_list",
        "description": "Django rest view that lists DatastoreProperty objects for a datastore in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatastoreProperty"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "datastore_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/datastores/{datastore_pk}/properties/{key}/": {
      "get": {
        "operationId": "datastores_properties_read",
        "description": "Django rest view that gets details of DatastoreProperty objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DatastoreProperty"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "datastore_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "key",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/datastores/{id}/": {
      "get": {
        "operationId": "datastores_read",
        "description": "Django rest view that gets details, and updates Datastore objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "datastores_update",
        "description": "Django rest view that gets details, and updates Datastore objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "datastores_partial_update",
        "description": "Django rest view that gets details, and updates Datastore objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Datastore"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "datastores_delete",
        "description": "Django rest view that gets details, and updates Datastore objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "datastores"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/expression/expr-recommendations/": {
      "get": {
        "operationId": "expression_expr-recommendations_list",
        "description": "Django rest view that lists the recommendation for expressions(DA/FIL) given a list of dataset IDs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "expression"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/feed/": {
      "get": {
        "operationId": "feed_list",
        "description": "Django rest view for listing feed objects.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeedEvent"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "feed"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/feed/active-users/": {
      "get": {
        "operationId": "feed_active-users_list",
        "description": "Django rest view for listing most active users based on the feed logs.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeedActiveUser"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "feed"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/fileset/{id}/": {
      "get": {
        "operationId": "fileset_read",
        "description": "DRF view for fileset details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LineageFilesetDetail"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "fileset"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/get-jwt/": {
      "post": {
        "operationId": "get-jwt_create",
        "description": "View for obtaining a new JWT",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JWTRequest"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "get-jwt"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/": {
      "get": {
        "operationId": "glossary_list",
        "description": "Creates and lists glossary instances.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GlossaryMini"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "glossary_create",
        "description": "Creates and lists glossary instances.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/bulk/assign/": {
      "post": {
        "operationId": "glossary_bulk_assign_create",
        "description": "List of sources/datasets/columns and glossary are provided in the above.\ndata: \"{\"sources\":[5,2,3],\"datasets\":[all],\"columns\":[3,4,2],\"glossary\":[5, 4]}\"\n\nNote on all:\nwhen there an start of the index entry for all/ALL, then glossary is linked\nto all the objects\n\n:param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/bulk/remove/": {
      "post": {
        "operationId": "glossary_bulk_remove_create",
        "summary": "Removes all the connections in bulk\n:param request: The request object",
        "description": ":type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/confluence/import-wiki-pages/": {
      "post": {
        "operationId": "glossary_confluence_import-wiki-pages_create",
        "description": "View for importing wiki page from confluence server and create glossary in unifi database for given list of pages.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/confluence/site-spaces/": {
      "get": {
        "operationId": "glossary_confluence_site-spaces_list",
        "description": "View for getting list of site spaces from confluence API.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/glossary/confluence/site-spaces/{space_key}/wiki-pages/": {
      "get": {
        "operationId": "glossary_confluence_site-spaces_wiki-pages_list",
        "description": "View for getting list of pages under given space key from confluence API.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "space_key",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/confluence/wiki-pages/{page_id}/": {
      "get": {
        "operationId": "glossary_confluence_wiki-pages_read",
        "description": "View for getting wiki page detail for given page id from confluence API.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "page_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/{id}/": {
      "get": {
        "operationId": "glossary_read",
        "description": "Gets the glossary detail",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "glossary_update",
        "description": "Gets the glossary detail",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "glossary_partial_update",
        "description": "Gets the glossary detail",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Glossary"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "glossary_delete",
        "description": "Gets the glossary detail",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/{id}/columns/": {
      "get": {
        "operationId": "glossary_columns_list",
        "description": "Given a glossary give back all the dataset columns assigned",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetColumn"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/{id}/data-sets/": {
      "get": {
        "operationId": "glossary_data-sets_list",
        "description": "Given a glossary give back all the datasets assigned",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Dataset"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/{id}/data-sources/": {
      "get": {
        "operationId": "glossary_data-sources_list",
        "description": "Given a glossary give back all the source assigned",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Source"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/glossary/{id}/dependents/": {
      "get": {
        "operationId": "glossary_dependents_list",
        "description": "Django rest view for getting objects dependent on a glossary object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.\nAccess is allowed if the role has glossary DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "glossary"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/groups/": {
      "get": {
        "operationId": "groups_list",
        "description": "Django rest view that creates and lists Group objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "groups_create",
        "description": "Django rest view that creates and lists Group objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/groups/{id}/": {
      "get": {
        "operationId": "groups_read",
        "description": "Django rest view to update group detail.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "groups_update",
        "description": "Django rest view to update group detail.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "groups_partial_update",
        "description": "Django rest view to update group detail.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Group"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "groups_delete",
        "description": "Django rest view to update group detail.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this group.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/groups/{id}/users/{user_pk}/add/": {
      "get": {
        "operationId": "groups_users_add_list",
        "summary": "Handles HTTP GET request for adding user to a group",
        "description": ":param request: The request object\n:param user_pk: The :py:class:`django.contrib.auth.models.User` ID field\n:param pk: The :py:class:`django.contrib.auth.models.Group` ID field\n\n:type request: :py:class:`django.request.Request`\n:type user_pk: int\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "user_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/groups/{id}/users/{user_pk}/remove/": {
      "get": {
        "operationId": "groups_users_remove_list",
        "summary": "Handles HTTP GET request for removing user from a group",
        "description": ":param request: The request object\n :param user_pk: The :py:class:`django.contrib.auth.models.User` ID field\n:param pk: The :py:class:`django.contrib.auth.models.Group` ID field\n\n:type request: :py:class:`django.request.Request`\n:type user_pk: int\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "groups"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "user_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/install-adapter/": {
      "post": {
        "operationId": "install-adapter_create",
        "summary": "Install Adapter",
        "description": "This request installs the latest version of the given adapter on the DCP instance.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "adapter_name"
              ],
              "type": "object",
              "properties": {
                "adapter_name": {
                  "title": "Adapter name",
                  "type": "string",
                  "minLength": 1,
                  "example": "Amazon_S3"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "required": [
                "adapter_name"
              ],
              "type": "object",
              "properties": {
                "adapter_name": {
                  "title": "Adapter name",
                  "type": "string",
                  "minLength": 1,
                  "example": "Amazon_S3"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/job-recommendation/datasets/": {
      "get": {
        "operationId": "job-recommendation_datasets_list",
        "summary": "Django rest view that gets Dataset Recommendations for job.",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.\n:cvar filter_backends:\n:cvar permission_classes: Permission classes for this view",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasetRecommendationForJob"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "job-recommendation"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/job-recommendation/joins/": {
      "get": {
        "operationId": "job-recommendation_joins_list",
        "summary": "Django rest view that gets Join Recommendations for jobs.",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.\n:cvar filter_backends:\n:cvar permission_classes: Permission classes for this view",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JoinRecommendationForJob"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "job-recommendation"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/job-type/{subtype}/{key}/": {
      "get": {
        "operationId": "job-type_read",
        "description": "Django rest view that gets list of job type properties based on requested jobtype subtype and the property key.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobTypeProperty"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "job-type"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "key",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "subtype",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/job-types/": {
      "get": {
        "operationId": "job-types_list",
        "description": "Django rest view that lists JobType objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "job-types"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/job-types/{id}/properties/": {
      "get": {
        "operationId": "job-types_properties_list",
        "description": "Django rest view that lists JobTypeProperty objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobTypeProperty"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "job-types"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/": {
      "get": {
        "operationId": "jobs_list",
        "description": "Django rest view that creates and lists Job objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Job"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "jobs_create",
        "description": "Django rest view that creates and lists Job objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/auto-mapping-recommendation/": {
      "get": {
        "operationId": "jobs_auto-mapping-recommendation_list",
        "summary": "Provides a dictionary of mappings and list of jobs associated with those mappings",
        "description": ":param request: The request object\n:return: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/das/": {
      "post": {
        "operationId": "jobs_das_create",
        "description": "Django rest view for derived attributes from the job json",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/executor/status/{id}/": {
      "get": {
        "operationId": "jobs_executor_status_read",
        "summary": "Gets the current status of a job in the executor service given a job id.",
        "description": ":param request: The request object\n\n :type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/explain/": {
      "post": {
        "operationId": "jobs_explain_create",
        "description": "Django rest view for explain of a job json",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/export/": {
      "get": {
        "operationId": "jobs_export_read",
        "description": "View for exporting a chosen list of jobs to an export file intended\nto be imported into another instance of unifi",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobExport"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/import/": {
      "post": {
        "operationId": "jobs_import_create",
        "description": "View for importing an export file that was previously generated\nvia the `JobExport` endpoint. The jobs included in that file will\nget adjusted to fit the target instance and then will get created.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/preview/": {
      "post": {
        "operationId": "jobs_preview_create",
        "summary": "Submits a preview job in the executor service for the job json given as part of the payload.",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/tags/": {
      "get": {
        "operationId": "jobs_tags_list",
        "description": "Django rest view that gets a summary of tags used by jobs and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/jobs/{id}/": {
      "get": {
        "operationId": "jobs_read",
        "description": "Django rest view that gets details, updates and destroys Job objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "jobs_update",
        "description": "Django rest view that gets details, updates and destroys Job objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "jobs_partial_update",
        "description": "Django rest view that gets details, updates and destroys Job objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "jobs_delete",
        "description": "Django rest view that gets details, updates and destroys Job objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/comments/": {
      "get": {
        "operationId": "jobs_comments_list",
        "description": "Django rest view for getting and creating comments on a job object.\nThis view is used to create a comment and to show all parent comments on a given dataset.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "jobs_comments_create",
        "description": "Django rest view for getting and creating comments on a job object.\nThis view is used to create a comment and to show all parent comments on a given dataset.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/comments/users/": {
      "get": {
        "operationId": "jobs_comments_users_list",
        "description": "Django rest view for getting user list of participants who wrote comments on a job object.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/data-sets/": {
      "get": {
        "operationId": "jobs_data-sets_list",
        "description": "Django rest view that lists all the datasets that this job uses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/dependents/": {
      "get": {
        "operationId": "jobs_dependents_list",
        "description": "Django rest view for getting objects dependent on a job object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.\nAccess is allowed if the role has job DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/derived-dataset/synchronize": {
      "post": {
        "operationId": "jobs_derived-dataset_synchronize_create",
        "description": "View for synchronizing DerivedDataset/DerivedDatasetRevision with Job/JobRevision.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/executor-compatiblity/": {
      "get": {
        "operationId": "jobs_executor-compatiblity_read",
        "description": "View to get a jobs compatibility with different executors.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobExecutorCompatibility"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/jira-references/{jira_reference_id}/": {
      "post": {
        "operationId": "jobs_jira-references_create",
        "summary": "POST request handler that adds a jira reference id to a given object.\nThe input includes the jira_reference_id to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "jobs_jira-references_delete",
        "description": "DELETE request handler that removes a jira reference from a given object.\nThe input includes the jira_reference_id to remove.\n\n:param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "jira_reference_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/outputs/": {
      "get": {
        "operationId": "jobs_outputs_list",
        "description": "Django rest view that lists JobOutput objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobOutputPoly"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/outputs/{output}/": {
      "get": {
        "operationId": "jobs_outputs_read",
        "description": "Django rest view that gets details of a JobOutput object in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobOutputPoly"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "output",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/outputs/{output}/dependents/": {
      "get": {
        "operationId": "jobs_outputs_dependents_list",
        "description": "Django rest view for getting objects dependent on a job output object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "output",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/outputs/{output}/impacted/": {
      "get": {
        "operationId": "jobs_outputs_impacted_list",
        "description": "Django rest view for getting objects dependent on a job output object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "output",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/outputs/{output}/mappings/": {
      "get": {
        "operationId": "jobs_outputs_mappings_list",
        "description": "Django rest view that lists Job output mapping objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobOutputMapping"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "output",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/revisions/": {
      "get": {
        "operationId": "jobs_revisions_list",
        "description": "Django rest view that lists a jobs revision history",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobRevision"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/revisions/{revision}/": {
      "get": {
        "operationId": "jobs_revisions_read",
        "description": "Django rest view that for GET requests returns a particular JobRevision and for PATCH/PUT sets a particular\njob revision as the current :py:class:`api.models.JobRevision` and returns the updated :py:class:`api.models.Job`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "jobs_revisions_update",
        "summary": "Reverts a job to its specified revision",
        "description": ":param request: The put request\n:param pk: The job id\n:param revision: The revision id\n:param args:\n:param kwargs:\n\n:return: :py:class:`api.models.Job`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "jobs_revisions_partial_update",
        "summary": "Reverts a job to its specified revision",
        "description": ":param request: The patch request\n:param pk: The job id\n:param revision: The revision id\n:param args:\n:param kwargs:\n\n:return: :py:class:`api.models.Job`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobWithOutputs"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "jobs_revisions_delete",
        "summary": "Deletes a JobRevision",
        "description": ":param request: the request\n:param args:\n:param kwargs:\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "revision",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/revisions/{revision}/diff/": {
      "get": {
        "operationId": "jobs_revisions_diff_read",
        "description": "Django view for getting the diff between a job and one of its revisions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobRevisionDiff"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "revision",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "jobs_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "jobs_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/jobs/{id}/transformation-query/": {
      "get": {
        "operationId": "jobs_transformation-query_read",
        "description": "Converts a job's Derived Dataset to a given transformation dialect.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransformationQuery"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/join-recommendations/": {
      "get": {
        "operationId": "join-recommendations_list",
        "summary": "Django rest view that lists Join Recommendation objects in unifi. Does not allow creating new\njoin recommendations",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JoinRecommendation"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "join-recommendations_create",
        "summary": "Django rest view that lists Join Recommendation objects in unifi. Does not allow creating new\njoin recommendations",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/join-recommendations/reload/": {
      "get": {
        "operationId": "join-recommendations_reload_list",
        "summary": "Submits the Join Recommendation reload task for :py:class:`api.models.JoinRecommendation` to Celery.",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/join-recommendations/{id}/": {
      "get": {
        "operationId": "join-recommendations_read",
        "summary": "Django rest view that gets details of Join Recommendation object in unifi. Allows delete/patch the\njoin recommendation.",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.\n:cvar permission_classes: Permission classes for this view",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "join-recommendations_update",
        "summary": "Django rest view that gets details of Join Recommendation object in unifi. Allows delete/patch the\njoin recommendation.",
        "description": ":cvar serializer_class: Class responsible for serializing to/from python object.\n:cvar permission_classes: Permission classes for this view",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "join-recommendations_partial_update",
        "description": "update requested join recommendation if the use has permission on related dataset",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "join-recommendations_delete",
        "description": "delete requested join recommendation if the use has permission on related dataset",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-recommendations"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/join-relation/": {
      "post": {
        "operationId": "join-relation_create",
        "description": "Django rest view to create join relation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JoinRecommendation"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "join-relation"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/ldap/groups/": {
      "get": {
        "operationId": "ldap_groups_list",
        "summary": "Returns a list of groups from LDAP",
        "description": ":param request: Django request object\n\n:return: list",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "ldap"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/ldap/groups/{dn}/": {
      "get": {
        "operationId": "ldap_groups_read",
        "summary": "Returns a list of users from LDAP that are members of an LDAP group",
        "description": ":param request: Django request object\n:param dn: LDAP DN of group\n\n:return: list",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "ldap"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dn",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/ldap/users/": {
      "get": {
        "operationId": "ldap_users_list",
        "summary": "Returns a list of users from LDAP",
        "description": ":param request: Django request object\n\n:return: list",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "ldap"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/license/upload/": {
      "post": {
        "operationId": "license_upload_create",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "license"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/lineage/{schedule_activity_id}/{job_id}/": {
      "get": {
        "operationId": "lineage_read",
        "summary": "Handler for HTTP GET request",
        "description": ":param request: User request\n:param args: positional args\n:param kwargs: keyword args\n\n:return: Response",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Lineage"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "lineage"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "schedule_activity_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/logout/": {
      "get": {
        "operationId": "logout_list",
        "summary": "Django REST view that handles HTTP GET requests for logging a user out.",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "logout"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/metadata/export/": {
      "post": {
        "operationId": "metadata_export_create",
        "description": "Get metadata formatted based on request parameters (ds, column and value ids).\nThe returned metadata elements are stored in a list. Each element is a dictionary,\nwith the dataset name as the key, and the value are its fields -\n'check' field to signify if it was part of the requested items, and 'attributes' field with its\nmetadata attribute data, and optionally a 'columns' field.\nA dataset can have a 'columns' field which holds each column that was requested.\nA column field can have a 'values' field which holds each value that was requested.\nEach requested column or value will also have their dataset and column in the returned data.\nE.g.:\nGiven requested value 13, which belongs to column 2 and dataset 4, the returned data will be:\n[{'dataset4': {\n  'source': <source name of dataset4>,\n  'check': False,\n  'columns': {\n    'column2': {\n      'check': False,\n      'attributes': {...}\n      'values: {\n        'value13':{\n          'check': True,\n          'attributes': {...}\n        }\n      }\n    }\n  }\n}}]\n\nNOTE: The response data can be pretty large, depending on the number of requested items and how many\nattributes each has. In the future this command might save the formatted data as a database entry or directly\nto a file instead of returning it.\n\n:param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataExport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetadataExport"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/notification-types/": {
      "get": {
        "operationId": "notification-types_list",
        "description": "Django rest view that lists NotificationType objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NotificationType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notification-types"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/notifications/": {
      "get": {
        "operationId": "notifications_list",
        "summary": "Django rest view for listing notifications",
        "description": "Only notifications pertaining to logged-in user will be returned",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Notification"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/notifications/mark-all-read/": {
      "put": {
        "operationId": "notifications_mark-all-read_update",
        "description": "Django rest view to mark all current user's notifications as read",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "notifications_mark-all-read_partial_update",
        "summary": "Method for marking all existing notifications of logged in user as READ",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/notifications/unread-count/": {
      "get": {
        "operationId": "notifications_unread-count_list",
        "summary": "Total unread notifications for current logged-in user",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/notifications/{id}/": {
      "get": {
        "operationId": "notifications_read",
        "summary": "Validate that the object is only viewable by logged in user",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this notification.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/notifications/{id}/toggle-read-status/": {
      "put": {
        "operationId": "notifications_toggle-read-status_update",
        "description": "Django rest view for toggling read status of a notification",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "notifications_toggle-read-status_partial_update",
        "summary": "Toggle read statuses",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "notifications"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this notification.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/oauth-acs/": {
      "get": {
        "operationId": "oauth-acs_list",
        "description": "OAUTH2 Assertion consumer service view.  Validates the assertion, creates the Unifi user if needed, sets\nJWT and refresh token cookies, and redirects the user back to /datai/",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "produces": [],
        "tags": [
          "oauth-acs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/oauth-sso/": {
      "get": {
        "operationId": "oauth-sso_list",
        "summary": "Initiates the OAUTH2 SSO flow",
        "description": ":param request: The request\n\n:return: HttpResponseRedirect",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "produces": [],
        "tags": [
          "oauth-sso"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/pii-rules/": {
      "get": {
        "operationId": "pii-rules_list",
        "description": "Django rest view that gives all pii rules or creates a new pii/masking rule",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PiiRule"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "pii-rules_create",
        "description": "Django rest view that gives all pii rules or creates a new pii/masking rule",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PiiRule"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PiiRule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/pii-rules/tags/": {
      "get": {
        "operationId": "pii-rules_tags_list",
        "description": "Django rest view that gets a summary of tags used by pii rules and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/pii-rules/{id}/": {
      "get": {
        "operationId": "pii-rules_read",
        "description": "Django rest view that gives returns the requested pii rule or deletes it",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PiiRule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "pii-rules_delete",
        "description": "Django rest view that gives returns the requested pii rule or deletes it",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/pii-rules/{id}/column-count/": {
      "get": {
        "operationId": "pii-rules_column-count_list",
        "summary": "Submits the metadata import task for a :py:class:`api.models.Source` to Celery.",
        "description": ":param request: The request object\n:param pk: ID of pii rule\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/pii-rules/{id}/dependents/": {
      "get": {
        "operationId": "pii-rules_dependents_list",
        "description": "Django rest view for getting objects dependent on a Pii Rule.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/pii-rules/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "pii-rules_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "pii-rules_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "pii-rules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/ping/": {
      "get": {
        "operationId": "ping_list",
        "summary": "Handles HTTP GET requests",
        "description": ":param request: The request object\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "ping"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/plugins/": {
      "get": {
        "operationId": "plugins_list",
        "description": "Django rest view that lists all plugins persisted in the metastore",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExecutorPlugin"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/plugins/data-types/": {
      "get": {
        "operationId": "plugins_data-types_list",
        "description": "Django rest view that gives all data types implemented by all the plugins",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExecutorDataType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "plugins_data-types_create",
        "description": "Django rest view that gives all data types implemented by all the plugins",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/plugins/data-types/tags/": {
      "get": {
        "operationId": "plugins_data-types_tags_list",
        "description": "Django rest view that gets a summary of tags used by plugin data types and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/plugins/data-types/{id}/": {
      "get": {
        "operationId": "plugins_data-types_read",
        "description": "Django rest view that gives data types for the given plugin id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutorDataType"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "plugins_data-types_delete",
        "description": "Django rest view that gives data types for the given plugin id",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/data-types/{id}/column-count/": {
      "get": {
        "operationId": "plugins_data-types_column-count_list",
        "summary": "Submits the metadata import task for a :py:class:`api.models.Source` to Celery.",
        "description": ":param request: The request object\n:param pk: ID of pii rule\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/data-types/{id}/dependents/": {
      "get": {
        "operationId": "plugins_data-types_dependents_list",
        "description": "Django rest view for getting objects dependent on a executor data type.\n    This view is used before deleting an object, to show its dependent objects\n    before verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/data-types/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "plugins_data-types_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "plugins_data-types_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/tags/": {
      "get": {
        "operationId": "plugins_tags_list",
        "description": "Django rest view that gets a summary of tags used by plugins and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/plugins/{id}/": {
      "get": {
        "operationId": "plugins_read",
        "description": "Django rest view that gives plugin details for the given plugin id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutorPlugin"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/{id}/data-types/": {
      "get": {
        "operationId": "plugins_data-types_list",
        "description": "Django rest view that gives data types for the given plugin id",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ExecutorDataType"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/plugins/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "plugins_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "plugins_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "plugins"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/recycle-bin/": {
      "get": {
        "operationId": "recycle-bin_list",
        "description": "Django rest view that provides an api to view deleted items in the recycle bin and empty the recycle bin.\nUsers can view only items that were deleted by them. Admins can view and delete all items.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RecycleBin"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "recycle-bin_delete",
        "description": "Deletes all objects in the recycle bin that are visible to the requesting user.\nIn effect this empties the recycles bin for the given user.",
        "parameters": [
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/recycle-bin/{id}/": {
      "get": {
        "operationId": "recycle-bin_read",
        "description": "Django rest view that gets details, deletes and restores a recycle bin item.\nEach item can include multiple deleted items, which will all be restored (using PATCH)\nor deleted (using DELETE) together.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecycleBin"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "recycle-bin_update",
        "description": "Django rest view that gets details, deletes and restores a recycle bin item.\nEach item can include multiple deleted items, which will all be restored (using PATCH)\nor deleted (using DELETE) together.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecycleBin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecycleBin"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "recycle-bin_partial_update",
        "description": "Django rest view that gets details, deletes and restores a recycle bin item.\nEach item can include multiple deleted items, which will all be restored (using PATCH)\nor deleted (using DELETE) together.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecycleBin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RecycleBin"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "recycle-bin_delete",
        "description": "Django rest view that gets details, deletes and restores a recycle bin item.\nEach item can include multiple deleted items, which will all be restored (using PATCH)\nor deleted (using DELETE) together.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/recycle-bin/{id}/items/": {
      "get": {
        "operationId": "recycle-bin_items_list",
        "description": "Django rest view that provides an api to view deleted items of a specific recycle bin object.\nUsers can view only items that were deleted by them. Admins can view all items.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeletedObject"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "recycle-bin"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/refresh-jwt/": {
      "get": {
        "operationId": "refresh-jwt_list",
        "description": "View for refreshing a previously issued JWT",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RefreshJWTRequest"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "refresh-jwt"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "refresh-jwt_create",
        "summary": "Refresh a previously issued JWT",
        "description": ":param request: The request\n:param args: args\n:param kwargs: kwargs\n\n:type request: :py:class:`rest_framework.request.Request`\n:type args: list\n:type kwargs: dict\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RefreshJWTRequest"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "refresh-jwt"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/roles/": {
      "get": {
        "operationId": "roles_list",
        "description": "Django rest view that lists Role objects in unifi.\nRead permissions to any authenticated user. Only admin can add new roles.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "roles_create",
        "description": "Django rest view that lists Role objects in unifi.\nRead permissions to any authenticated user. Only admin can add new roles.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/roles/options/": {
      "get": {
        "operationId": "roles_options_list",
        "description": "Django rest view to get the allowed permission options for each role field and operation.\nThe possible options are \"Y\" (always), \"N\" (never), \"O\" (based on object permissions).\nDifferent categories and operations support different options, and this view shows them.\n**NOTE:** at the moment \"Y\" (always) option is not fully supported, because we do check for object permissions\nin our permission classes and filters backends. Until it is fully supported, this option is removed from the\nlist of options, when the options also include \"O\". As we add coverage, we this option will become visible.\n\nIn addition, the view only returns the categories that are supported by the running product (catalog/platform)",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/roles/{id}/": {
      "get": {
        "operationId": "roles_read",
        "description": "Django rest view to get details of a specific role. Update is disabled for built-in roles.\nDelete is allowed only for user-defined roles that don't have users assigned to them.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "roles_update",
        "description": "Django rest view to get details of a specific role. Update is disabled for built-in roles.\nDelete is allowed only for user-defined roles that don't have users assigned to them.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "roles_partial_update",
        "description": "Django rest view to get details of a specific role. Update is disabled for built-in roles.\nDelete is allowed only for user-defined roles that don't have users assigned to them.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "roles_delete",
        "description": "Django rest view to get details of a specific role. Update is disabled for built-in roles.\nDelete is allowed only for user-defined roles that don't have users assigned to them.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "roles"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this unifi role.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/saml-acs/": {
      "post": {
        "operationId": "saml-acs_create",
        "summary": "Processes the SAML2 assertion",
        "description": ":param request: The request\n\n:return: HttpResponseRedirect",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "tags": [
          "saml-acs"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/saml-sso/": {
      "get": {
        "operationId": "saml-sso_list",
        "summary": "Initiates the SAML2 SSO flow",
        "description": ":param request: The request\n\n:return: HttpResponseRedirect",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "produces": [],
        "tags": [
          "saml-sso"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/schedule-activities/": {
      "get": {
        "operationId": "schedule-activities_list",
        "description": "Django REST view for schedule activity list.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LatestScheduleActivityList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/schedule-activities/latest/": {
      "get": {
        "operationId": "schedule-activities_latest_list",
        "description": "Django REST view for schedule activity Dashboard.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LatestScheduleActivityList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/schedule-activities/{id}/": {
      "get": {
        "operationId": "schedule-activities_read",
        "description": "Django rest view that gets details, updates and destroys ScheduleActivity objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "schedule-activities_update",
        "description": "Django rest view that gets details, updates and destroys ScheduleActivity objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "schedule-activities_partial_update",
        "description": "Django rest view that gets details, updates and destroys ScheduleActivity objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "schedule-activities_delete",
        "description": "Django rest view that gets details, updates and destroys ScheduleActivity objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/cancel/": {
      "get": {
        "operationId": "schedule-activities_cancel_list",
        "summary": "Given a schedule activity ID, cancel the execution of the activity",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/dependents/": {
      "get": {
        "operationId": "schedule-activities_dependents_list",
        "description": "Django rest view for getting objects dependent on a ScheduleActivity object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/job/{job_pk}/dataset/{ds_pk}/errors/download/": {
      "get": {
        "operationId": "schedule-activities_job_dataset_errors_download_list",
        "summary": "Given a schedule activity ID, Job ID and DatasetID, downloads the error rows.",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n:param job_pk: Primary key of the :py:class:`api.models.Job`\n:param ds_pk: Primary key of the :py:class:`api.models.Dataset`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:type job_pk: int\n:type ds_pk: int\n\n:returns: :py:class:`django.response.Response` or :py:class:`django.http.StreamingHttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "ds_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "job_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/job/{job_pk}/dataset/{ds_pk}/errors/sample/": {
      "get": {
        "operationId": "schedule-activities_job_dataset_errors_sample_list",
        "summary": "Given a schedule activity ID, Job ID and DatasetID, retrieves the error rows sample for the dataset in the job.",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n:param job_pk: Primary key of the :py:class:`api.models.Job`\n:param ds_pk: Primary key of the :py:class:`api.models.Dataset`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:type job_pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "ds_pk",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "job_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/job/{job_pk}/download/": {
      "get": {
        "operationId": "schedule-activities_job_download_list",
        "summary": "Given a schedule activity ID and Job ID, downloads the job output in requested file format.",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n:param job_pk: Primary key of the :py:class:`api.models.Job`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:type job_pk: int\n\n:returns: :py:class:`django.response.Response` or :py:class:`django.http.StreamingHttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "job_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/job/{job_pk}/export/": {
      "get": {
        "operationId": "schedule-activities_job_export_list",
        "summary": "Given a ScheduleActivity ID and Job ID, exports the job output to requested file format.",
        "description": ":param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n:param job_pk: Primary key of the :py:class:`api.models.Job`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:type job_pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "job_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedule-activities/{id}/job/{job_pk}/sample/": {
      "get": {
        "operationId": "schedule-activities_job_sample_list",
        "description": "Given a schedule activity ID and Job ID, retrieves the job output sample data. As a job can have multiple\noutputs, destination and name may be optionally set in the request to retrieve exact job output sample. If\ndestination and name are not available or are invalid, sample data for first job output is retrieved and\nreturned\n\n:param request: The request object\n:param pk: Primary key of the :py:class:`api.models.ScheduleActivity`\n:param job_pk: Primary key of the :py:class:`api.models.Job`\n\n:type request: :py:class:`django.request.Request`\n:type pk: int\n:type job_pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedule-activities"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "job_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedules/": {
      "get": {
        "operationId": "schedules_list",
        "description": "Django rest view that lists Schedule objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowScheduleList"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "schedules_create",
        "description": "Django rest view that lists Schedule objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowScheduleList"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowScheduleList"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/schedules/plan/{timestamp}/": {
      "get": {
        "operationId": "schedules_plan_read",
        "description": "Django rest view that lists workflow schedules to be executed on the upcoming 24 hours starting\nfrom a given timestamp. response includes start times.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "timestamp",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/schedules/tags/": {
      "get": {
        "operationId": "schedules_tags_list",
        "description": "Django rest view that gets a summary of tags used by workflow schedules and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/schedules/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "schedules_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "schedules_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "schedules"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search/bulk-check-eligibility/": {
      "post": {
        "operationId": "search_bulk-check-eligibility_create",
        "description": "POST request handler that determines if the given user or group is allowed to view the given objects,\nas represented in a list of entity_ids.\n\n:param request: Django request object\n\n:return Django response that includes a list of entity_ids that the requesting user is not allowed to view.\nUsually this list is smaller than the allowed object, and this is why this list is returned.\n\n:rtype :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/check-eligibility/": {
      "post": {
        "operationId": "search_check-eligibility_create",
        "description": "POST request handler that determines if the given user or group is allowed to view the\ngiven the given object represented by entity_id.\nThe expected input is a list of entity_ids with one item.\n\n:param request: Django request object\n\n:return Django response that indicates whether the requesting user has\nthe given permission on the object\n\n:rtype :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/core-create/": {
      "get": {
        "operationId": "search_core-create_list",
        "summary": "Reload solr core",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/core-reload/": {
      "get": {
        "operationId": "search_core-reload_list",
        "summary": "Reload solr core",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/core-status/": {
      "get": {
        "operationId": "search_core-status_list",
        "summary": "Check solr core status",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/core-unload/": {
      "get": {
        "operationId": "search_core-unload_list",
        "summary": "Reload solr core",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/dataimport/": {
      "post": {
        "operationId": "search_dataimport_create",
        "summary": "Full/Incremental update of Solr Search Index",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchDataImport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchDataImport"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/ask/": {
      "get": {
        "operationId": "search_ia_ask_list",
        "description": ":param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/association/": {
      "get": {
        "operationId": "search_ia_association_list",
        "description": "Get Expression list view given a particular column ID",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Expression"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/association/{id}/": {
      "get": {
        "operationId": "search_ia_association_read",
        "description": "Give back all the details about a particular expression",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Expression"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this expression.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/search/ia/auto-complete/": {
      "get": {
        "operationId": "search_ia_auto-complete_list",
        "description": "Given a start word, gets back auto complete sentences.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/auto-complete/build-model/": {
      "get": {
        "operationId": "search_ia_auto-complete_build-model_list",
        "description": "Loads the sentence data into redis, and the subscribed channel in IA service will start building the model\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/dataset-similarity/build-model/": {
      "get": {
        "operationId": "search_ia_dataset-similarity_build-model_list",
        "description": "Loads the features from datasets into redis, and the subscribed channel in IA service will start building the model\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/graph/reload/": {
      "get": {
        "operationId": "search_ia_graph_reload_list",
        "description": "Reload the IA graph by publishing events into redis pub/sub channels.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/graph/search-name/": {
      "get": {
        "operationId": "search_ia_graph_search-name_list",
        "description": "Search for name of column or dataset for type-ahead",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/graph/status/": {
      "get": {
        "operationId": "search_ia_graph_status_list",
        "description": "Get the status of the graph.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/lineage/{id}/": {
      "get": {
        "operationId": "search_ia_lineage_read",
        "description": "view for job lineage given a column ID",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Lineage"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search/ia/parse/": {
      "get": {
        "operationId": "search_ia_parse_list",
        "description": "Handle HTTP GET request for parsed version of the question string and save the question in metastore\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/people-also-ask-for/": {
      "get": {
        "operationId": "search_ia_people-also-ask-for_list",
        "description": "A view to send back a list of questions and searches that are contextual to the names\nin the incoming question. Limit is parameter to give not more than these many\nelements based on the user usability aspect.\n\nPERMISSION is from this helper routine _prep_and_check_perms\nPermission logic:\nIn this scenario, there is no knowledge of \"which object\" name being anything other than just a name.\nWe do not guess on those things here. We do not store Ids, its just a parsed out result of a possible name. So as\nlong as we have a name associated with the any of the 3 objects, we will give back as true.\nSo there is no permission other than checking a name associated with a user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Sentence"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/pii-recommendation/build-model/": {
      "get": {
        "operationId": "search_ia_pii-recommendation_build-model_list",
        "description": "Loads the features from datasets into redis, and the subscribed channel in IA service will start building the model\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/pinned/": {
      "get": {
        "operationId": "search_ia_pinned_list",
        "description": "View for retrieving a list of pinned search/sentences",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Sentence"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/pinned/{id}/": {
      "get": {
        "operationId": "search_ia_pinned_read",
        "description": "View to update/retrieves a sentence given ID.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sentence"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "search_ia_pinned_update",
        "description": "View to update/retrieves a sentence given ID.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sentence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sentence"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "search_ia_pinned_partial_update",
        "description": "View to update/retrieves a sentence given ID.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sentence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Sentence"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/search/ia/question-domain/": {
      "get": {
        "operationId": "search_ia_question-domain_list",
        "description": "Handle HTTP GET request for parsed version of the question string and save the question in metastore\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/suggestion/": {
      "get": {
        "operationId": "search_ia_suggestion_list",
        "description": "Parse a question and give back a tokenwise suggestions",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/synonyms/": {
      "get": {
        "operationId": "search_ia_synonyms_list",
        "description": "API View to update IA service synonym file",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "search_ia_synonyms_create",
        "description": "API View to update IA service synonym file",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/things-to-try/": {
      "get": {
        "operationId": "search_ia_things-to-try_list",
        "description": "A view to send back a list of things to try package information with names and sample questions\nfrom the IA service.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/ia/trending/": {
      "get": {
        "operationId": "search_ia_trending_list",
        "description": "A view to send back a list of trending names. Limit is parameter to give not more than these many\nelements based on the user usability aspect.\n\nPERMISSION is from this helper routine _prep_and_check_perms\nPermission logic:\nIn this scenario, there is no knowledge of \"which object\" name being anything other than just a name.\nWe do not guess on those things here. We do not store Ids, its just a parsed out result of a possible name. So as\nlong as we have a name associated with the any of the 3 objects, we will give back as true.\nSo there is no permission other than checking a name associated with a user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/select/": {
      "get": {
        "operationId": "search_select_list",
        "summary": "Get solr search result given the search query parameters",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/server-status/": {
      "get": {
        "operationId": "search_server-status_list",
        "summary": "Check solr server status",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/search/suggest/": {
      "get": {
        "operationId": "search_suggest_list",
        "summary": "Get solr search suggestions given the search query parameters",
        "description": ":param request: The request object\n\n:type request: :py:class:`django.request.Request`\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "search"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/server-info/": {
      "get": {
        "operationId": "server-info_list",
        "summary": "Handles HTTP GET requests",
        "description": ":param request: The request object\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "server-info"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/supported-adapters/": {
      "get": {
        "operationId": "supported-adapters_list",
        "summary": "List supported adapters",
        "description": "Retrieves a list of adapters supported by DCP.\nRequired permissions: Role permissions based on \"adapter_perms\"",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Adapter"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/sync-plugins/": {
      "get": {
        "operationId": "sync-plugins_list",
        "description": "sync the plugin and data type info between executor and metastore\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "sync-plugins"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/connections/": {
      "get": {
        "operationId": "tableau_connections_list",
        "description": "View for listing Tableau Server connections",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/connections/{connection_id}/": {
      "get": {
        "operationId": "tableau_connections_read",
        "description": "View for retrieving/updating a Tableau Server connection",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_connections_update",
        "description": "View for retrieving/updating a Tableau Server connection",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_connections_partial_update",
        "description": "View for retrieving/updating a Tableau Server connection",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "connection_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/datasources/": {
      "get": {
        "operationId": "tableau_datasources_list",
        "description": "View for listing Tableau Server datasources",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/datasources/{datasource_id}/": {
      "get": {
        "operationId": "tableau_datasources_read",
        "description": "View for retrieving/updating Tableau Server datasource",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_datasources_update",
        "description": "View for retrieving/updating Tableau Server datasource",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_datasources_partial_update",
        "description": "View for retrieving/updating Tableau Server datasource",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "datasource_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/groups/": {
      "get": {
        "operationId": "tableau_groups_list",
        "description": "View for listing Tableau Server groups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableauGroup"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/groups/{group_id}/": {
      "get": {
        "operationId": "tableau_groups_read",
        "description": "View for retrieving/updating a Tableau Server group",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauGroup"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_groups_update",
        "description": "View for retrieving/updating a Tableau Server group",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableauGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauGroup"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_groups_partial_update",
        "description": "View for retrieving/updating a Tableau Server group",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableauGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauGroup"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "group_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/load-graph/": {
      "get": {
        "operationId": "tableau_load-graph_list",
        "description": "Enables async graph loading of all the datasets, columns and metadata, including the given source.\n:param request: The request object\n:type request: :py:class:`django.request.Request`\n:returns: :py:class:`django.response.HttpResponse`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/projects/": {
      "get": {
        "operationId": "tableau_projects_list",
        "description": "View for listing Tableau Server projects",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/projects/{project_id}/": {
      "get": {
        "operationId": "tableau_projects_read",
        "description": "View for retrieving/updating details of a Tableau Server project",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_projects_update",
        "description": "View for retrieving/updating details of a Tableau Server project",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_projects_partial_update",
        "description": "View for retrieving/updating details of a Tableau Server project",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/projects/{project_id}/connections/": {
      "get": {
        "operationId": "tableau_projects_connections_list",
        "description": "View for listing Tableau Server connections in a project",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/projects/{project_id}/datasources/": {
      "get": {
        "operationId": "tableau_projects_datasources_list",
        "description": "View for listing Tableau Server datasources in a project",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/projects/{project_id}/workbooks/": {
      "get": {
        "operationId": "tableau_projects_workbooks_list",
        "description": "View for listing Tableau Server workbooks in a project",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "project_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/schedules/": {
      "get": {
        "operationId": "tableau_schedules_list",
        "description": "View for listing Tableau Server schedules",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/schedules/{schedule_id}/": {
      "get": {
        "operationId": "tableau_schedules_read",
        "description": "View for retrieving/updating a Tableau Server schedule",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_schedules_update",
        "description": "View for retrieving/updating a Tableau Server schedule",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_schedules_partial_update",
        "description": "View for retrieving/updating a Tableau Server schedule",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "schedule_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/users/": {
      "get": {
        "operationId": "tableau_users_list",
        "description": "View for listing Tableau Server users",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TableauUser"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/users/{user_id}/": {
      "get": {
        "operationId": "tableau_users_read",
        "description": "View for retrieving/updating Tableau Server user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauUser"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_users_update",
        "description": "View for retrieving/updating Tableau Server user",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableauUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauUser"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_users_partial_update",
        "description": "View for retrieving/updating Tableau Server user",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableauUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TableauUser"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/views/": {
      "get": {
        "operationId": "tableau_views_list",
        "description": "View for listing Tableau Server views",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/views/{view_id}/": {
      "get": {
        "operationId": "tableau_views_read",
        "description": "View for retrieving/updating details of a Tableau Server view",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_views_update",
        "description": "View for retrieving/updating details of a Tableau Server view",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_views_partial_update",
        "description": "View for retrieving/updating details of a Tableau Server view",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "view_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/views/{view_id}/image/": {
      "get": {
        "operationId": "tableau_views_image_list",
        "description": "View for retrieving a Tableau Server view full-size PNG image",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "produces": [
          "image/png",
          "application/json"
        ],
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "view_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/views/{view_id}/thumbnail/": {
      "get": {
        "operationId": "tableau_views_thumbnail_list",
        "description": "View for retrieving a Tableau Server view thumbnail PNG image",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "produces": [
          "image/png",
          "application/json"
        ],
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "view_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/views/{view_id}/vizurl/": {
      "get": {
        "operationId": "tableau_views_vizurl_list",
        "description": "View for getting a Tableau view Viz Url, including trusted ticket if the user has linked accounts.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "view_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/workbooks/": {
      "get": {
        "operationId": "tableau_workbooks_list",
        "description": "View for listing Tableau Server workbooks",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/tableau/workbooks/{workbook_id}/": {
      "get": {
        "operationId": "tableau_workbooks_read",
        "description": "View for retrieving details of a Tableau Server workbook",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "tableau_workbooks_update",
        "description": "View for retrieving details of a Tableau Server workbook",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "tableau_workbooks_partial_update",
        "description": "View for retrieving details of a Tableau Server workbook",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "workbook_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/workbooks/{workbook_id}/connections/": {
      "get": {
        "operationId": "tableau_workbooks_connections_list",
        "description": "View for listing Tableau Server connections in a workbook",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "workbook_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/workbooks/{workbook_id}/datasources/": {
      "get": {
        "operationId": "tableau_workbooks_datasources_list",
        "description": "View for listing Tableau Server datasources in a workbook",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "workbook_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tableau/workbooks/{workbook_id}/views/": {
      "get": {
        "operationId": "tableau_workbooks_views_list",
        "description": "View for listing Tableau Server views in a workbook",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "tableau"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "workbook_id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/transform-dialect/": {
      "get": {
        "operationId": "transform-dialect_list",
        "description": "Lists transformation dialects available",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "transform-dialect"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/transform-dialect/{dialect_name}/": {
      "get": {
        "operationId": "transform-dialect_read",
        "description": "Gets details of a transformation dialect by name",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "transform-dialect"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "dialect_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/unifi-settings/": {
      "get": {
        "operationId": "unifi-settings_list",
        "description": "Django rest view that lists and bulk updates unifi settings. This view is limited only to admin users.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UnifiSetting"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "unifi-settings"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "unifi-settings_update",
        "description": "Django rest view that lists and bulk updates unifi settings. This view is limited only to admin users.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnifiSettingsUpdate"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UnifiSettingsUpdate"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "unifi-settings"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "unifi-settings_partial_update",
        "summary": "Patch request handler that updates unifi settings",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnifiSettingsUpdate"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UnifiSettingsUpdate"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "unifi-settings"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/unifi-settings/{setting_name}/": {
      "get": {
        "operationId": "unifi-settings_read",
        "description": "Django rest view to update unifi settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UnifiSettingsRead"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "unifi-settings"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "setting_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/upgrade-adapter/": {
      "post": {
        "operationId": "upgrade-adapter_create",
        "summary": "Upgrade Adapter",
        "description": "This request upgrades the given adapter to its latest version on the DCP instance.\n",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "adapter_name"
              ],
              "type": "object",
              "properties": {
                "adapter_name": {
                  "title": "Adapter name",
                  "type": "string",
                  "minLength": 1,
                  "example": "Amazon_S3"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "required": [
                "adapter_name"
              ],
              "type": "object",
              "properties": {
                "adapter_name": {
                  "title": "Adapter name",
                  "type": "string",
                  "minLength": 1,
                  "example": "Amazon_S3"
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "Adapters"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/": {
      "get": {
        "operationId": "users_list",
        "description": "Django REST view that gets list of unifi users and creates new users.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "users_create",
        "summary": "Django REST view that handles HTTP POST requests to create new unifi users.",
        "description": ":param request: The request\n\n:type request: :py:class:`rest_framework.request.Request`\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/avatars/": {
      "get": {
        "operationId": "users_avatars_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "users_avatars_create",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/password-reset-response/": {
      "post": {
        "operationId": "users_password-reset-response_create",
        "description": "Reset the password given a valid token",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/password-reset/": {
      "post": {
        "operationId": "users_password-reset_create",
        "description": "Send out a password reset email.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/tags/": {
      "get": {
        "operationId": "users_tags_list",
        "description": "Django rest view that gets a summary of tags used by sources and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/users/{id}/": {
      "get": {
        "operationId": "users_read",
        "summary": "Django REST view that handles HTTP GET requests to retrieve a specific unifi user.",
        "description": ":param request: The request\n:param pk: ID of the user to retrieve\n\n:type request: :py:class:`rest_framework.request.Request`\n:type pk: int\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "users_update",
        "description": "Get, Update, or Delete a specific unifi user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "users_partial_update",
        "summary": "Django REST view that handles HTTP PATCH requests to update a unifi user.",
        "description": ":param request: The request\n:param pk: ID of the user to update\n\n:type request: :py:class:`rest_framework.request.Request`\n:type pk: int\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "users_delete",
        "summary": "Django REST view that handles HTTP DELETE requests to delete a unifi user.",
        "description": ":param request: The request\n:param pk: ID of the user to delete\n\n:type request: :py:class:`rest_framework.request.Request`\n:type pk: int\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/users/{id}/avatar/": {
      "get": {
        "operationId": "users_avatar_list",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "users_avatar_create",
        "description": "",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "users_avatar_delete",
        "description": "",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{id}/data/": {
      "get": {
        "operationId": "users_data_list",
        "description": "View for front-end to store/retrieve FE specific, opaque, user data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "users_data_create",
        "description": "View for front-end to store/retrieve FE specific, opaque, user data",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "users_data_update",
        "description": "View for front-end to store/retrieve FE specific, opaque, user data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "users_data_partial_update",
        "description": "View for front-end to store/retrieve FE specific, opaque, user data",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "users_data_delete",
        "description": "View for front-end to store/retrieve FE specific, opaque, user data",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{id}/ownership-count/": {
      "get": {
        "operationId": "users_ownership-count_read",
        "description": "Return the number of objects owned by the user.\nThis is used before transferring ownership.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/users/{id}/role/": {
      "get": {
        "operationId": "users_role_list",
        "description": "Get the role assigned to the given user\n:param request: the request object\n:param pk: the target user id to fetch the role for\n:return a Role object",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/users/{id}/tableau/": {
      "get": {
        "operationId": "users_tableau_list",
        "description": "View for linking a Tableau Server user account with a Unifi user account",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "users_tableau_create",
        "description": "View for linking a Tableau Server user account with a Unifi user account",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{id}/tableau/{datastore_id}/": {
      "put": {
        "operationId": "users_tableau_update",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "users_tableau_partial_update",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "users_tableau_delete",
        "description": "",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "datastore_id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "users_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "users_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/users/{id}/transfer-ownership/": {
      "post": {
        "operationId": "users_transfer-ownership_create",
        "description": "Transfer ownership from given user to another admin user.\nOwnership is determined by the created_by fields of various objects.\nThis call will update these fields to be that of the new user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserTransferOwnership"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserTransferOwnership"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "users"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "A unique integer value identifying this user.",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/verify-jwt/": {
      "post": {
        "operationId": "verify-jwt_create",
        "summary": "Verify a previously issued JWT",
        "description": ":param request: the request\n:param args: args\n:param kwargs: kwargs\n\n:type request: :py:class:`rest_framework.request.Request`\n:type args: list\n:type kwargs: dict\n\n:return: :py:class:`rest_framework.response.Response`",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyJWTRequest"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "verify-jwt"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/workflow-schedule/{id}/": {
      "get": {
        "operationId": "workflow-schedule_read",
        "description": "Django rest view that gets details, updates and destroys Schedule objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflow-schedule"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "workflow-schedule_update",
        "description": "Django rest view that gets details, updates and destroys Schedule objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflow-schedule"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "workflow-schedule_partial_update",
        "description": "Django rest view that gets details, updates and destroys Schedule objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflow-schedule"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "workflow-schedule_delete",
        "description": "Django rest view that gets details, updates and destroys Schedule objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflow-schedule"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflow-schedule/{id}/dependents/": {
      "get": {
        "operationId": "workflow-schedule_dependents_list",
        "description": "Django rest view for getting objects dependent on a\nworkflow schedule object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflow-schedule"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/": {
      "get": {
        "operationId": "workflows_list",
        "description": "Django rest view that creates and lists Workflow objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Workflow"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "workflows_create",
        "description": "Django rest view that creates and lists Workflow objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/workflows/tags/": {
      "get": {
        "operationId": "workflows_tags_list",
        "description": "Django rest view that gets a summary of tags used by workflows and their count.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TagsCount"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": []
    },
    "/workflows/{id}/": {
      "get": {
        "operationId": "workflows_read",
        "description": "Django rest view that gets details, updates and destroys Workflow objects in unifi.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "put": {
        "operationId": "workflows_update",
        "description": "Django rest view that gets details, updates and destroys Workflow objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "workflows_partial_update",
        "description": "Django rest view that gets details, updates and destroys Workflow objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "workflows_delete",
        "description": "Django rest view that gets details, updates and destroys Workflow objects in unifi.",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{id}/dependents/": {
      "get": {
        "operationId": "workflows_dependents_list",
        "description": "Django rest view for getting objects dependent on a workflow object.\nThis view is used before deleting an object, to show its dependent objects\nbefore verifying deletion.\nAccess is allowed if the role has workflow DELETE permissions, so a mapping from\nGET method to DELETE permissions is required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{id}/jobs/": {
      "get": {
        "operationId": "workflows_jobs_list",
        "description": "Django rest view that lists all the jobs that this workflow uses",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{id}/schedules/": {
      "get": {
        "operationId": "workflows_schedules_list",
        "description": "Django rest view that creates and lists WorkflowSchedule objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkflowSchedule"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "workflows_schedules_create",
        "description": "Django rest view that creates and lists WorkflowSchedule objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/WorkflowSchedule"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{id}/tags/{tag_name}/": {
      "post": {
        "operationId": "workflows_tags_create",
        "summary": "POST request handler that adds a tag to a given object.\nThe input includes the tag_name to add.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "workflows_tags_delete",
        "summary": "DELETE request handler that removes a tag from a given object.\nThe input includes the tag_name to remove.",
        "description": ":param request: Django request object\n:return: Django response that indicates the status of the request\n:rtype: :py:class rest_framework.response.Response",
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "tag_name",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{wf_pk}/schedules/{id}/activities/": {
      "get": {
        "operationId": "workflows_schedules_activities_list",
        "description": "Django rest view that lists ScheduleActivity objects in unifi.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "required": [
                "count",
                "results"
              ],
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "next": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "previous": {
                  "type": "string",
                  "format": "uri",
                  "x-nullable": true
                },
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ScheduleActivity"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "workflows_schedules_activities_create",
        "description": "Django rest view that lists ScheduleActivity objects in unifi.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          },
          {
            "name": "filter_is_owner",
            "in": "query",
            "description": "Filter the result set to based on whether the requesting user owns the object or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_has_permissions",
            "in": "query",
            "description": "Filter the result set based on whether the requesting user has permissions on the object",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter_xyz",
            "in": "query",
            "description": "Filter on any field name in the response. List views allow the user to filter on any field in the response model. The format of the filter value depends on the type of the field.",
            "required": false,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "sort_xyz",
            "in": "query",
            "description": "Sort the result set by any field in the response model. Prefix the field name with a - to use descending order while sorting.",
            "required": false,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScheduleActivity"
            }
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "wf_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/workflows/{wf_pk}/schedules/{id}/execute/": {
      "get": {
        "operationId": "workflows_schedules_execute_list",
        "summary": "Handles HTTP GET request for schedule execution.",
        "description": ":param request: The request object\n:param wf_pk: The :py:class:`api.models.Workflow` ID field\n:param pk: The :py:class:`api.models.WorkflowSchedule` ID field\n\n:type request: :py:class:`django.request.Request`\n:type wf_pk: int\n:type pk: int\n\n:returns: :py:class:`django.response.Response`",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApiException"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "deprecated": false
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "wf_pk",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    }
  },
  "definitions": {
    "Request": {
      "required": [
        "id",
        "status",
        "message",
        "requester_read",
        "approver_read",
        "created_on",
        "last_updated_on"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer"
        },
        "request_obj": {
          "title": "Request obj",
          "type": "string",
          "readOnly": true
        },
        "obj_id": {
          "title": "Obj id",
          "type": "string",
          "readOnly": true
        },
        "obj_type": {
          "title": "Obj type",
          "type": "string",
          "readOnly": true
        },
        "desc": {
          "title": "Desc",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "title": "Source",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "title": "Category",
          "type": "string",
          "readOnly": true
        },
        "dataset": {
          "title": "Dataset",
          "type": "string",
          "readOnly": true
        },
        "requester": {
          "title": "Requester",
          "type": "string",
          "readOnly": true
        },
        "approver": {
          "title": "Approver",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "type": "string",
          "minLength": 1
        },
        "message": {
          "title": "Message",
          "type": "string",
          "minLength": 1
        },
        "requester_read": {
          "title": "Requester read",
          "type": "boolean"
        },
        "approver_read": {
          "title": "Approver read",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time"
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ApiException": {
      "required": [
        "status_code",
        "detail"
      ],
      "type": "object",
      "properties": {
        "status_code": {
          "title": "HTTP status code",
          "type": "integer",
          "example": "500"
        },
        "detail": {
          "title": "Detailed error message",
          "type": "string",
          "minLength": 1,
          "example": "Unexpected error while processing the request"
        }
      }
    },
    "BulkSourcePermission": {
      "required": [
        "data"
      ],
      "type": "object",
      "properties": {
        "data": {
          "title": "Data",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ChangePassword": {
      "required": [
        "username",
        "password",
        "new_password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        },
        "new_password": {
          "title": "New password",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Comment": {
      "required": [
        "comment"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true
        },
        "comment": {
          "title": "Comment",
          "type": "string",
          "maxLength": 3000,
          "minLength": 1
        },
        "submit_date": {
          "title": "Date/time submitted",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "parent_id": {
          "title": "Parent id",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "level": {
          "title": "Level",
          "type": "integer",
          "readOnly": true
        },
        "allow_reply": {
          "title": "Allow reply",
          "type": "string",
          "readOnly": true
        },
        "flags": {
          "title": "Flags",
          "type": "string",
          "readOnly": true
        },
        "order": {
          "title": "Order",
          "type": "integer",
          "readOnly": true
        },
        "reply_count": {
          "title": "Reply count",
          "type": "string",
          "readOnly": true
        },
        "content_type": {
          "title": "Content type",
          "type": "string",
          "readOnly": true
        },
        "object_pk": {
          "title": "Object ID",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "Flag": {
      "required": [
        "comment",
        "flag"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "title": "Comment",
          "type": "integer"
        },
        "flag": {
          "title": "Flag",
          "type": "string",
          "maxLength": 30,
          "minLength": 1
        }
      }
    },
    "DAFILObject": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "da_fil_obj": {
          "title": "Da fil obj",
          "type": "string",
          "minLength": 1
        },
        "da_fil_template": {
          "title": "Da fil template",
          "type": "string"
        },
        "da_fil_valid": {
          "title": "Da fil valid",
          "type": "boolean"
        },
        "da_fil_type": {
          "title": "Da fil type",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CsvFile": {
      "required": [
        "name",
        "source"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Dataset: Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Dataset: Name",
          "type": "string",
          "minLength": 1
        },
        "path": {
          "title": "CsvFile: Path",
          "type": "string"
        },
        "source": {
          "title": "Dataset: Source",
          "type": "integer"
        },
        "source_name": {
          "title": "CsvFile: Source name",
          "type": "string",
          "readOnly": true
        },
        "source_category": {
          "title": "CsvFile: Source category",
          "type": "string",
          "readOnly": true
        },
        "source_interface": {
          "title": "CsvFile: Source interface",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "Dataset: Description",
          "type": "string",
          "x-nullable": true
        },
        "created_by": {
          "title": "Dataset: Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Dataset: Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Dataset: Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Dataset: Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "last_imported": {
          "title": "Dataset: Last imported",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Dataset: Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Dataset: Has permissions",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "title": "CsvFile: Metadata",
          "type": "object"
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Dataset: Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "sample_size": {
          "title": "Dataset: Sample size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "deleting": {
          "title": "Dataset: Deleting",
          "type": "string",
          "readOnly": true
        },
        "jira_references": {
          "type": "array",
          "items": {
            "title": "Dataset: Jira references",
            "type": "string",
            "minLength": 1
          },
          "x-nullable": true
        },
        "unifi_type_guessed": {
          "title": "Dataset: Unifi type guessed",
          "type": "boolean"
        },
        "last_updated": {
          "title": "Dataset: Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "polymorphic_ctype": {
          "title": "Dataset: Polymorphic ctype",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "DatabaseTable": {
      "required": [
        "name",
        "type",
        "source"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Dataset: Id",
          "type": "integer",
          "readOnly": true
        },
        "schema": {
          "title": "DatabaseTable: Schema",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "title": "Dataset: Name",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "title": "DatabaseTable: Type",
          "type": "string",
          "minLength": 1
        },
        "last_updated": {
          "title": "Dataset: Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "source": {
          "title": "Dataset: Source",
          "type": "integer"
        },
        "source_name": {
          "title": "DatabaseTable: Source name",
          "type": "string",
          "readOnly": true
        },
        "source_category": {
          "title": "DatabaseTable: Source category",
          "type": "string",
          "readOnly": true
        },
        "source_interface": {
          "title": "DatabaseTable: Source interface",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "Dataset: Description",
          "type": "string",
          "x-nullable": true
        },
        "unifi_type_guessed": {
          "title": "Dataset: Unifi type guessed",
          "type": "boolean"
        },
        "writable": {
          "title": "DatabaseTable: Writable",
          "type": "boolean"
        },
        "created_by": {
          "title": "Dataset: Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Dataset: Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Dataset: Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Dataset: Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "last_imported": {
          "title": "Dataset: Last imported",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Dataset: Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Dataset: Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Dataset: Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "sample_size": {
          "title": "Dataset: Sample size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "deleting": {
          "title": "Dataset: Deleting",
          "type": "string",
          "readOnly": true
        },
        "jira_references": {
          "type": "array",
          "items": {
            "title": "Dataset: Jira references",
            "type": "string",
            "minLength": 1
          },
          "x-nullable": true
        },
        "polymorphic_ctype": {
          "title": "Dataset: Polymorphic ctype",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Dataset": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "source"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Dataset: Id",
              "type": "integer",
              "readOnly": true
            },
            "name": {
              "title": "Dataset: Name",
              "type": "string",
              "minLength": 1
            },
            "path": {
              "title": "CsvFile: Path",
              "type": "string"
            },
            "source": {
              "title": "Dataset: Source",
              "type": "integer"
            },
            "source_name": {
              "title": "CsvFile: Source name",
              "type": "string",
              "readOnly": true
            },
            "source_category": {
              "title": "CsvFile: Source category",
              "type": "string",
              "readOnly": true
            },
            "source_interface": {
              "title": "CsvFile: Source interface",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "title": "Dataset: Description",
              "type": "string",
              "x-nullable": true
            },
            "created_by": {
              "title": "Dataset: Created by",
              "type": "string",
              "readOnly": true
            },
            "created_on": {
              "title": "Dataset: Created on",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "last_updated_by": {
              "title": "Dataset: Last updated by",
              "type": "string",
              "readOnly": true,
              "x-nullable": true
            },
            "last_updated_on": {
              "title": "Dataset: Last updated on",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "last_imported": {
              "title": "Dataset: Last imported",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "is_owner": {
              "title": "Dataset: Is owner",
              "type": "string",
              "readOnly": true
            },
            "has_permissions": {
              "title": "Dataset: Has permissions",
              "type": "string",
              "readOnly": true
            },
            "metadata": {
              "title": "CsvFile: Metadata",
              "type": "object"
            },
            "tags": {
              "type": "array",
              "items": {
                "title": "Dataset: Tags",
                "type": "string",
                "maxLength": 32,
                "minLength": 1
              },
              "x-nullable": true
            },
            "sample_size": {
              "title": "Dataset: Sample size",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648,
              "x-nullable": true
            },
            "deleting": {
              "title": "Dataset: Deleting",
              "type": "string",
              "readOnly": true
            },
            "jira_references": {
              "type": "array",
              "items": {
                "title": "Dataset: Jira references",
                "type": "string",
                "minLength": 1
              },
              "x-nullable": true
            },
            "unifi_type_guessed": {
              "title": "Dataset: Unifi type guessed",
              "type": "boolean"
            },
            "last_updated": {
              "title": "Dataset: Last updated",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "polymorphic_ctype": {
              "title": "Dataset: Polymorphic ctype",
              "type": "integer",
              "readOnly": true
            }
          }
        },
        {
          "required": [
            "name",
            "type",
            "source"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Dataset: Id",
              "type": "integer",
              "readOnly": true
            },
            "schema": {
              "title": "DatabaseTable: Schema",
              "type": "string",
              "x-nullable": true
            },
            "name": {
              "title": "Dataset: Name",
              "type": "string",
              "minLength": 1
            },
            "type": {
              "title": "DatabaseTable: Type",
              "type": "string",
              "minLength": 1
            },
            "last_updated": {
              "title": "Dataset: Last updated",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "source": {
              "title": "Dataset: Source",
              "type": "integer"
            },
            "source_name": {
              "title": "DatabaseTable: Source name",
              "type": "string",
              "readOnly": true
            },
            "source_category": {
              "title": "DatabaseTable: Source category",
              "type": "string",
              "readOnly": true
            },
            "source_interface": {
              "title": "DatabaseTable: Source interface",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "title": "Dataset: Description",
              "type": "string",
              "x-nullable": true
            },
            "unifi_type_guessed": {
              "title": "Dataset: Unifi type guessed",
              "type": "boolean"
            },
            "writable": {
              "title": "DatabaseTable: Writable",
              "type": "boolean"
            },
            "created_by": {
              "title": "Dataset: Created by",
              "type": "string",
              "readOnly": true
            },
            "created_on": {
              "title": "Dataset: Created on",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "last_updated_by": {
              "title": "Dataset: Last updated by",
              "type": "string",
              "readOnly": true,
              "x-nullable": true
            },
            "last_updated_on": {
              "title": "Dataset: Last updated on",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "last_imported": {
              "title": "Dataset: Last imported",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "is_owner": {
              "title": "Dataset: Is owner",
              "type": "string",
              "readOnly": true
            },
            "has_permissions": {
              "title": "Dataset: Has permissions",
              "type": "string",
              "readOnly": true
            },
            "tags": {
              "type": "array",
              "items": {
                "title": "Dataset: Tags",
                "type": "string",
                "maxLength": 32,
                "minLength": 1
              },
              "x-nullable": true
            },
            "sample_size": {
              "title": "Dataset: Sample size",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648,
              "x-nullable": true
            },
            "deleting": {
              "title": "Dataset: Deleting",
              "type": "string",
              "readOnly": true
            },
            "jira_references": {
              "type": "array",
              "items": {
                "title": "Dataset: Jira references",
                "type": "string",
                "minLength": 1
              },
              "x-nullable": true
            },
            "polymorphic_ctype": {
              "title": "Dataset: Polymorphic ctype",
              "type": "integer",
              "readOnly": true
            }
          }
        }
      ]
    },
    "DatasetColumnMini": {
      "required": [
        "dataset"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "dataset": {
          "title": "Dataset",
          "type": "integer"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "is_pii": {
          "title": "Is pii",
          "type": "boolean",
          "x-nullable": true
        },
        "primitive_type": {
          "title": "Primitive type",
          "type": "integer",
          "x-nullable": true
        },
        "user_defined_type": {
          "title": "User defined type",
          "type": "integer",
          "x-nullable": true
        },
        "pii_rule": {
          "title": "Pii rule",
          "type": "integer",
          "x-nullable": true
        },
        "leaf": {
          "title": "Leaf",
          "type": "boolean"
        }
      }
    },
    "Glossary": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "narrative": {
          "title": "Narrative",
          "type": "string",
          "x-nullable": true
        },
        "references": {
          "type": "array",
          "items": {
            "title": "References",
            "type": "string",
            "minLength": 1
          }
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "GroupObjectPermission": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 80,
          "minLength": 1
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetColumnStatistics": {
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true
        },
        "human_readable_name": {
          "title": "Human readable name",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "title": "Value",
          "type": "object"
        },
        "is_complex": {
          "title": "Is complex",
          "type": "string",
          "readOnly": true
        },
        "detail": {
          "title": "Detail",
          "type": "string"
        }
      }
    },
    "UserObjectPermission": {
      "required": [
        "username",
        "ldap"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "string",
          "pattern": "^[\\w.@+-]+$",
          "maxLength": 150,
          "minLength": 1
        },
        "first_name": {
          "title": "First name",
          "type": "string",
          "maxLength": 30
        },
        "last_name": {
          "title": "Last name",
          "type": "string",
          "maxLength": 30
        },
        "is_active": {
          "title": "Active",
          "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
          "type": "boolean"
        },
        "date_joined": {
          "title": "Date joined",
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "ldap": {
          "title": "Ldap",
          "type": "integer"
        },
        "role_id": {
          "title": "Role id",
          "type": "string",
          "readOnly": true
        },
        "role_name": {
          "title": "Role name",
          "type": "string",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CsvFileColumn": {
      "required": [
        "csv_file"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "csv_file": {
          "title": "CsvFileWithColumns: Csv file",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "position": {
          "title": "CsvFileWithColumns: Position",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "is_pii": {
          "title": "Is pii",
          "type": "boolean",
          "x-nullable": true
        },
        "masking_function": {
          "title": "Masking function",
          "type": "object",
          "x-nullable": true
        },
        "primitive_type": {
          "title": "Primitive type",
          "type": "integer",
          "x-nullable": true
        },
        "user_defined_type": {
          "title": "User defined type",
          "type": "integer",
          "x-nullable": true
        },
        "contained_type": {
          "title": "Contained type",
          "type": "integer",
          "x-nullable": true
        },
        "primitive_type_name": {
          "title": "CsvFileWithColumns: Primitive type name",
          "type": "string",
          "readOnly": true
        },
        "user_defined_type_name": {
          "title": "CsvFileWithColumns: User defined type name",
          "type": "string",
          "readOnly": true
        },
        "contained_type_name": {
          "title": "CsvFileWithColumns: Contained type name",
          "type": "string",
          "readOnly": true
        },
        "original_name": {
          "title": "CsvFileWithColumns: Original name",
          "type": "string"
        },
        "pii_rule": {
          "title": "Pii rule",
          "type": "integer",
          "x-nullable": true
        },
        "leaf": {
          "title": "Leaf",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent",
          "type": "integer",
          "x-nullable": true
        },
        "fqn": {
          "title": "Fqn",
          "type": "string"
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        },
        "last_updated": {
          "title": "Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "polymorphic_ctype": {
          "title": "Polymorphic ctype",
          "type": "integer",
          "readOnly": true
        },
        "dataset": {
          "title": "Dataset",
          "type": "integer"
        }
      }
    },
    "CsvFileWithColumns": {
      "required": [
        "name",
        "source"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "CsvFileWithColumns: Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "CsvFileWithColumns: Name",
          "type": "string",
          "minLength": 1
        },
        "path": {
          "title": "CsvFileWithColumns: Path",
          "type": "string"
        },
        "source": {
          "title": "CsvFileWithColumns: Source",
          "type": "integer"
        },
        "source_name": {
          "title": "CsvFileWithColumns: Source name",
          "type": "string",
          "readOnly": true
        },
        "source_category": {
          "title": "CsvFileWithColumns: Source category",
          "type": "string",
          "readOnly": true
        },
        "source_interface": {
          "title": "CsvFileWithColumns: Source interface",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "CsvFileWithColumns: Description",
          "type": "string",
          "x-nullable": true
        },
        "created_by": {
          "title": "CsvFileWithColumns: Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "CsvFileWithColumns: Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "CsvFileWithColumns: Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "CsvFileWithColumns: Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "last_imported": {
          "title": "CsvFileWithColumns: Last imported",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "CsvFileWithColumns: Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "CsvFileWithColumns: Has permissions",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "title": "CsvFileWithColumns: Metadata",
          "type": "object"
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "CsvFileWithColumns: Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "sample_size": {
          "title": "CsvFileWithColumns: Sample size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "deleting": {
          "title": "CsvFileWithColumns: Deleting",
          "type": "string",
          "readOnly": true
        },
        "jira_references": {
          "title": "CsvFileWithColumns: Jira references",
          "type": "string",
          "readOnly": true
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CsvFileColumn"
          },
          "readOnly": true
        }
      }
    },
    "DatabaseColumn": {
      "required": [
        "table"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "data_type": {
          "title": "Data type",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        },
        "db_type_name": {
          "title": "Db type name",
          "type": "string"
        },
        "size": {
          "title": "Size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "buffer_length": {
          "title": "Buffer length",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "decimal_digits": {
          "title": "Decimal digits",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "num_prec_radix": {
          "title": "Num prec radix",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "nullable": {
          "title": "Nullable",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        },
        "remarks": {
          "title": "Remarks",
          "type": "string",
          "x-nullable": true
        },
        "default": {
          "title": "Default",
          "type": "string",
          "x-nullable": true
        },
        "sql_data_type": {
          "title": "Sql data type",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        },
        "sql_datetime_sub": {
          "title": "Sql datetime sub",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "char_octet_length": {
          "title": "Char octet length",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "ordinal_position": {
          "title": "Ordinal position",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "is_nullable": {
          "title": "Is nullable",
          "type": "string",
          "x-nullable": true
        },
        "last_updated": {
          "title": "Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "table": {
          "title": "Table",
          "type": "integer"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "is_pii": {
          "title": "Is pii",
          "type": "boolean",
          "x-nullable": true
        },
        "masking_function": {
          "title": "Masking function",
          "type": "object",
          "x-nullable": true
        },
        "primitive_type": {
          "title": "Primitive type",
          "type": "integer",
          "x-nullable": true
        },
        "user_defined_type": {
          "title": "User defined type",
          "type": "integer",
          "x-nullable": true
        },
        "contained_type": {
          "title": "Contained type",
          "type": "integer",
          "x-nullable": true
        },
        "primitive_type_name": {
          "title": "Primitive type name",
          "type": "string",
          "readOnly": true
        },
        "user_defined_type_name": {
          "title": "User defined type name",
          "type": "string",
          "readOnly": true
        },
        "contained_type_name": {
          "title": "Contained type name",
          "type": "string",
          "readOnly": true
        },
        "pii_rule": {
          "title": "Pii rule",
          "type": "integer",
          "x-nullable": true
        },
        "leaf": {
          "title": "Leaf",
          "type": "boolean"
        },
        "parent": {
          "title": "Parent",
          "type": "integer",
          "x-nullable": true
        },
        "fqn": {
          "title": "Fqn",
          "type": "string"
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        },
        "polymorphic_ctype": {
          "title": "Polymorphic ctype",
          "type": "integer",
          "readOnly": true
        },
        "dataset": {
          "title": "Dataset",
          "type": "integer"
        }
      }
    },
    "DatabaseForeignKey": {
      "required": [
        "table",
        "key_sequence",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "table": {
          "title": "Table",
          "type": "integer"
        },
        "ref_dataset": {
          "title": "Ref dataset",
          "type": "integer",
          "x-nullable": true
        },
        "column": {
          "title": "Column",
          "type": "integer",
          "x-nullable": true
        },
        "ref_column": {
          "title": "Ref column",
          "type": "integer",
          "x-nullable": true
        },
        "key_sequence": {
          "title": "Key sequence",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        },
        "update_rule": {
          "title": "Update rule",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "delete_rule": {
          "title": "Delete rule",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "deferrability": {
          "title": "Deferrability",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "last_updated": {
          "title": "Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatabaseIndex": {
      "required": [
        "table",
        "name",
        "column_name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "table": {
          "title": "Table",
          "type": "integer"
        },
        "non_unique": {
          "title": "Non unique",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "qualifier": {
          "title": "Qualifier",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "title": "Type",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "ordinal_position": {
          "title": "Ordinal position",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        },
        "column_name": {
          "title": "Column name",
          "type": "string",
          "minLength": 1
        },
        "asc_or_desc": {
          "title": "Asc or desc",
          "type": "string",
          "maxLength": 1,
          "x-nullable": true
        },
        "cardinality": {
          "title": "Cardinality",
          "type": "integer",
          "maximum": 9223372036854775807,
          "minimum": -9223372036854775808,
          "x-nullable": true
        },
        "pages": {
          "title": "Pages",
          "type": "integer",
          "maximum": 9223372036854775807,
          "minimum": -9223372036854775808,
          "x-nullable": true
        },
        "filter_condition": {
          "title": "Filter condition",
          "type": "string",
          "x-nullable": true
        },
        "last_updated": {
          "title": "Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatabasePrimaryKey": {
      "required": [
        "table",
        "column",
        "column_name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "table": {
          "title": "Table",
          "type": "integer"
        },
        "column": {
          "title": "Column",
          "type": "integer"
        },
        "column_name": {
          "title": "Column name",
          "type": "string",
          "minLength": 1
        },
        "key_sequence": {
          "title": "Key sequence",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768,
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "last_updated": {
          "title": "Last updated",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetEndorsementStatus": {
      "required": [
        "dataset_id",
        "endorsement_state"
      ],
      "type": "object",
      "properties": {
        "dataset_id": {
          "title": "Dataset id",
          "type": "integer"
        },
        "endorsement_state": {
          "title": "Endorsement state",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "DatasetEndorsement": {
      "required": [
        "message"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "endorsement_state": {
          "title": "Endorsement state",
          "type": "string",
          "enum": [
            "NE",
            "TR",
            "DE"
          ]
        },
        "message": {
          "title": "Message",
          "type": "string"
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "type": "string",
          "readOnly": true
        },
        "user_first_name": {
          "title": "User first name",
          "type": "string",
          "readOnly": true
        },
        "user_last_name": {
          "title": "User last name",
          "type": "string",
          "readOnly": true
        },
        "current": {
          "title": "Current",
          "type": "boolean"
        },
        "dataset_id": {
          "title": "Dataset id",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetMini": {
      "required": [
        "name",
        "source"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "source": {
          "title": "Source",
          "type": "integer"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetStatisticsActivityList": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "dataset_id": {
          "title": "Dataset id",
          "type": "string",
          "readOnly": true
        },
        "dataset_name": {
          "title": "Dataset name",
          "type": "string",
          "readOnly": true
        },
        "source_id": {
          "title": "Source id",
          "type": "string",
          "readOnly": true
        },
        "source_name": {
          "title": "Source name",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "type": "string",
          "minLength": 1
        },
        "sample_size": {
          "title": "Sample size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "start_time": {
          "title": "Start time",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "end_time": {
          "title": "End time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "user_triggered": {
          "title": "User triggered",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "active": {
          "title": "Active",
          "type": "boolean"
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetStatisticsActivity": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "dataset_id": {
          "title": "Dataset id",
          "type": "string",
          "readOnly": true
        },
        "dataset_name": {
          "title": "Dataset name",
          "type": "string",
          "readOnly": true
        },
        "source_id": {
          "title": "Source id",
          "type": "string",
          "readOnly": true
        },
        "source_name": {
          "title": "Source name",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "type": "string",
          "minLength": 1
        },
        "sample_size": {
          "title": "Sample size",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "start_time": {
          "title": "Start time",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "end_time": {
          "title": "End time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "user_triggered": {
          "title": "User triggered",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "active": {
          "title": "Active",
          "type": "boolean"
        },
        "detail": {
          "title": "Detail",
          "type": "object"
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TagsCount": {
      "required": [
        "tag",
        "count"
      ],
      "type": "object",
      "properties": {
        "tag": {
          "title": "Tag",
          "type": "string",
          "minLength": 1
        },
        "count": {
          "title": "Count",
          "type": "integer"
        }
      }
    },
    "LineageMini": {
      "required": [
        "transform_start_time",
        "transform_end_time"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "schedule_activity": {
          "title": "Schedule activity",
          "type": "integer",
          "x-nullable": true
        },
        "job": {
          "title": "Job",
          "type": "string",
          "readOnly": true
        },
        "job_name": {
          "title": "Job name",
          "type": "string",
          "readOnly": true
        },
        "transform_start_time": {
          "title": "Transform start time",
          "type": "string",
          "format": "date-time"
        },
        "transform_end_time": {
          "title": "Transform end time",
          "type": "string",
          "format": "date-time"
        },
        "valid": {
          "title": "Valid",
          "type": "boolean"
        }
      }
    },
    "Attributes": {
      "required": [
        "attribute_name",
        "editable",
        "scorable"
      ],
      "type": "object",
      "properties": {
        "attribute_name": {
          "title": "Attribute name",
          "type": "string",
          "minLength": 1
        },
        "editable": {
          "title": "Editable",
          "type": "boolean"
        },
        "scorable": {
          "title": "Scorable",
          "type": "boolean"
        }
      }
    },
    "AttributesData": {
      "required": [
        "attribute_name",
        "editable",
        "scorable",
        "data"
      ],
      "type": "object",
      "properties": {
        "attribute_name": {
          "title": "Attribute name",
          "type": "string",
          "minLength": 1
        },
        "editable": {
          "title": "Editable",
          "type": "boolean"
        },
        "scorable": {
          "title": "Scorable",
          "type": "boolean"
        },
        "data": {
          "title": "Data",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ColumnMetadataCellVotes": {
      "required": [
        "user",
        "cell",
        "score"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "title": "User",
          "type": "integer"
        },
        "cell": {
          "title": "Cell",
          "type": "integer"
        },
        "score": {
          "title": "Score",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        }
      }
    },
    "ColumnValue": {
      "required": [
        "name",
        "column"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "column": {
          "title": "Column",
          "type": "integer"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ValueMetadataCellVotes": {
      "required": [
        "user",
        "cell",
        "score"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "user": {
          "title": "User",
          "type": "integer"
        },
        "cell": {
          "title": "Cell",
          "type": "integer"
        },
        "score": {
          "title": "Score",
          "type": "integer",
          "maximum": 32767,
          "minimum": -32768
        }
      }
    },
    "DatasetColumn": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "csv_file"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "readOnly": true
            },
            "csv_file": {
              "title": "CsvFileWithColumns: Csv file",
              "type": "integer"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "position": {
              "title": "CsvFileWithColumns: Position",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "created_by": {
              "title": "Created by",
              "type": "string",
              "readOnly": true
            },
            "created_on": {
              "title": "Created on",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "last_updated_by": {
              "title": "Last updated by",
              "type": "string",
              "readOnly": true,
              "x-nullable": true
            },
            "last_updated_on": {
              "title": "Last updated on",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "is_owner": {
              "title": "Is owner",
              "type": "string",
              "readOnly": true
            },
            "has_permissions": {
              "title": "Has permissions",
              "type": "string",
              "readOnly": true
            },
            "is_pii": {
              "title": "Is pii",
              "type": "boolean",
              "x-nullable": true
            },
            "masking_function": {
              "title": "Masking function",
              "type": "object",
              "x-nullable": true
            },
            "primitive_type": {
              "title": "Primitive type",
              "type": "integer",
              "x-nullable": true
            },
            "user_defined_type": {
              "title": "User defined type",
              "type": "integer",
              "x-nullable": true
            },
            "contained_type": {
              "title": "Contained type",
              "type": "integer",
              "x-nullable": true
            },
            "primitive_type_name": {
              "title": "CsvFileWithColumns: Primitive type name",
              "type": "string",
              "readOnly": true
            },
            "user_defined_type_name": {
              "title": "CsvFileWithColumns: User defined type name",
              "type": "string",
              "readOnly": true
            },
            "contained_type_name": {
              "title": "CsvFileWithColumns: Contained type name",
              "type": "string",
              "readOnly": true
            },
            "original_name": {
              "title": "CsvFileWithColumns: Original name",
              "type": "string"
            },
            "pii_rule": {
              "title": "Pii rule",
              "type": "integer",
              "x-nullable": true
            },
            "leaf": {
              "title": "Leaf",
              "type": "boolean"
            },
            "parent": {
              "title": "Parent",
              "type": "integer",
              "x-nullable": true
            },
            "fqn": {
              "title": "Fqn",
              "type": "string"
            },
            "deleting": {
              "title": "Deleting",
              "type": "string",
              "readOnly": true
            },
            "last_updated": {
              "title": "Last updated",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "polymorphic_ctype": {
              "title": "Polymorphic ctype",
              "type": "integer",
              "readOnly": true
            },
            "dataset": {
              "title": "Dataset",
              "type": "integer"
            }
          }
        },
        {
          "required": [
            "table"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "readOnly": true
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "data_type": {
              "title": "Data type",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768
            },
            "db_type_name": {
              "title": "Db type name",
              "type": "string"
            },
            "size": {
              "title": "Size",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648,
              "x-nullable": true
            },
            "buffer_length": {
              "title": "Buffer length",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648,
              "x-nullable": true
            },
            "decimal_digits": {
              "title": "Decimal digits",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768,
              "x-nullable": true
            },
            "num_prec_radix": {
              "title": "Num prec radix",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768,
              "x-nullable": true
            },
            "nullable": {
              "title": "Nullable",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768
            },
            "remarks": {
              "title": "Remarks",
              "type": "string",
              "x-nullable": true
            },
            "default": {
              "title": "Default",
              "type": "string",
              "x-nullable": true
            },
            "sql_data_type": {
              "title": "Sql data type",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768
            },
            "sql_datetime_sub": {
              "title": "Sql datetime sub",
              "type": "integer",
              "maximum": 32767,
              "minimum": -32768,
              "x-nullable": true
            },
            "char_octet_length": {
              "title": "Char octet length",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648,
              "x-nullable": true
            },
            "ordinal_position": {
              "title": "Ordinal position",
              "type": "integer",
              "maximum": 2147483647,
              "minimum": -2147483648
            },
            "is_nullable": {
              "title": "Is nullable",
              "type": "string",
              "x-nullable": true
            },
            "last_updated": {
              "title": "Last updated",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "table": {
              "title": "Table",
              "type": "integer"
            },
            "created_by": {
              "title": "Created by",
              "type": "string",
              "readOnly": true
            },
            "created_on": {
              "title": "Created on",
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "last_updated_by": {
              "title": "Last updated by",
              "type": "string",
              "readOnly": true,
              "x-nullable": true
            },
            "last_updated_on": {
              "title": "Last updated on",
              "type": "string",
              "format": "date-time",
              "x-nullable": true
            },
            "is_owner": {
              "title": "Is owner",
              "type": "string",
              "readOnly": true
            },
            "has_permissions": {
              "title": "Has permissions",
              "type": "string",
              "readOnly": true
            },
            "is_pii": {
              "title": "Is pii",
              "type": "boolean",
              "x-nullable": true
            },
            "masking_function": {
              "title": "Masking function",
              "type": "object",
              "x-nullable": true
            },
            "primitive_type": {
              "title": "Primitive type",
              "type": "integer",
              "x-nullable": true
            },
            "user_defined_type": {
              "title": "User defined type",
              "type": "integer",
              "x-nullable": true
            },
            "contained_type": {
              "title": "Contained type",
              "type": "integer",
              "x-nullable": true
            },
            "primitive_type_name": {
              "title": "Primitive type name",
              "type": "string",
              "readOnly": true
            },
            "user_defined_type_name": {
              "title": "User defined type name",
              "type": "string",
              "readOnly": true
            },
            "contained_type_name": {
              "title": "Contained type name",
              "type": "string",
              "readOnly": true
            },
            "pii_rule": {
              "title": "Pii rule",
              "type": "integer",
              "x-nullable": true
            },
            "leaf": {
              "title": "Leaf",
              "type": "boolean"
            },
            "parent": {
              "title": "Parent",
              "type": "integer",
              "x-nullable": true
            },
            "fqn": {
              "title": "Fqn",
              "type": "string"
            },
            "deleting": {
              "title": "Deleting",
              "type": "string",
              "readOnly": true
            },
            "polymorphic_ctype": {
              "title": "Polymorphic ctype",
              "type": "integer",
              "readOnly": true
            },
            "dataset": {
              "title": "Dataset",
              "type": "integer"
            }
          }
        }
      ]
    },
    "UserLDAP": {
      "title": "Ldap",
      "type": "object",
      "properties": {
        "ldap_dn": {
          "title": "Ldap dn",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "User": {
      "required": [
        "username",
        "password",
        "password_changed_on"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "title": "Username",
          "description": "Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
          "type": "string",
          "pattern": "^[\\w.@+-]+$",
          "maxLength": 150,
          "minLength": 1
        },
        "first_name": {
          "title": "First name",
          "type": "string",
          "maxLength": 30
        },
        "last_name": {
          "title": "Last name",
          "type": "string",
          "maxLength": 30
        },
        "is_active": {
          "title": "Active",
          "description": "Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
          "type": "boolean"
        },
        "date_joined": {
          "title": "Date joined",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "title": "Email address",
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "password": {
          "title": "Password",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "ldap": {
          "$ref": "#/definitions/UserLDAP"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "role_id": {
          "title": "Role id",
          "type": "string",
          "readOnly": true
        },
        "role_name": {
          "title": "Role name",
          "type": "string",
          "readOnly": true
        },
        "password_changed_on": {
          "title": "Password changed on",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "type": {
          "title": "Type",
          "type": "integer"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "string"
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        },
        "jira_references": {
          "title": "Jira references",
          "type": "string",
          "readOnly": true
        },
        "default_output": {
          "title": "Default output",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TriggerDatasetStatistics": {
      "required": [
        "sample"
      ],
      "type": "object",
      "properties": {
        "sample": {
          "title": "Sample",
          "type": "boolean"
        },
        "sample_size": {
          "title": "Sample size",
          "type": "integer",
          "x-nullable": true
        },
        "file_pattern": {
          "title": "File pattern",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "DatasetStatistics": {
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true
        },
        "human_readable_name": {
          "title": "Human readable name",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true
        },
        "value": {
          "title": "Value",
          "type": "object"
        },
        "is_complex": {
          "title": "Is complex",
          "type": "string",
          "readOnly": true
        },
        "detail": {
          "title": "Detail",
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {}
    },
    "Source": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "datastore": {
          "title": "Datastore",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "properties": {
          "type": "array",
          "items": {
            "required": [
              "key",
              "value",
              "source"
            ],
            "type": "object",
            "properties": {
              "id": {
                "title": "ID",
                "type": "integer",
                "readOnly": true
              },
              "key": {
                "title": "Key",
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              "value": {
                "title": "Value",
                "type": "string"
              },
              "custom": {
                "title": "Custom",
                "type": "boolean"
              },
              "source": {
                "title": "Source",
                "type": "integer"
              }
            }
          },
          "readOnly": true
        },
        "imported": {
          "title": "Imported",
          "type": "string"
        },
        "last_imported": {
          "title": "Last imported",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "last_import_detail": {
          "title": "Last import detail",
          "type": "string",
          "x-nullable": true
        },
        "interface": {
          "title": "Interface",
          "type": "string",
          "readOnly": true
        },
        "category": {
          "title": "Category",
          "type": "string",
          "readOnly": true
        },
        "adapter_icon_name": {
          "title": "Adapter icon name",
          "type": "string",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SourceImportActivity": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "schedule_id": {
          "title": "Schedule id",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "title": "Status",
          "type": "string"
        },
        "start_time": {
          "title": "Start time",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "end_time": {
          "title": "End time",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "successful": {
          "title": "Successful",
          "type": "boolean",
          "x-nullable": true
        },
        "manually_executed": {
          "title": "Manually executed",
          "type": "boolean"
        },
        "activity_details": {
          "title": "Activity details",
          "type": "object",
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "source_id": {
          "title": "Source id",
          "type": "string",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "source_name": {
          "title": "Source name",
          "type": "string",
          "readOnly": true
        },
        "schedule_name": {
          "title": "Schedule name",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SourceImportSchedule": {
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "minute": {
          "title": "Minute",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "hour": {
          "title": "Hour",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_week": {
          "title": "Day of week",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_month": {
          "title": "Day of month",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "month_of_year": {
          "title": "Month of year",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "type": "boolean"
        },
        "expires": {
          "title": "Expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "object",
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "source": {
          "title": "Source",
          "type": "integer"
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TriggerSourceFileInfoStatistics": {
      "required": [
        "filepath",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "filepath": {
          "title": "Filepath",
          "type": "string",
          "minLength": 1
        },
        "metadata": {
          "title": "Metadata",
          "type": "object"
        }
      }
    },
    "SourceProperty": {
      "required": [
        "source",
        "key",
        "value"
      ],
      "type": "object",
      "properties": {
        "source": {
          "title": "Source",
          "type": "integer"
        },
        "key": {
          "title": "Key",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "value": {
          "title": "Value",
          "type": "string"
        },
        "custom": {
          "title": "Custom",
          "type": "boolean"
        }
      }
    },
    "ExecutorDataType": {
      "required": [
        "type_name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "uid": {
          "title": "Uid",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "plugin_id": {
          "title": "Plugin id",
          "type": "integer",
          "readOnly": true
        },
        "type_name": {
          "title": "Type name",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "is_core_type": {
          "title": "Is core type",
          "type": "boolean",
          "readOnly": true
        },
        "is_complex_type": {
          "title": "Is complex type",
          "type": "boolean",
          "readOnly": true
        },
        "regex": {
          "title": "Regex",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatastoreAdapter": {
      "required": [
        "adapter_category",
        "adapter_interface",
        "adapter_name",
        "adapter_base",
        "adapter_version",
        "adapter_lib_directory",
        "adapter_class",
        "datasource_property_descriptions",
        "datastore_property_descriptions",
        "vendor_name",
        "vendor_product_name",
        "vendor_product_version"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "adapter_category": {
          "title": "Adapter category",
          "type": "string",
          "enum": [
            "DATABASE",
            "FILESYSTEM",
            "SERVICE",
            "BUSINESS INTELLIGENCE"
          ]
        },
        "adapter_interface": {
          "title": "Adapter interface",
          "type": "string",
          "enum": [
            "DATABASE",
            "FILESYSTEM",
            "TABLEAU"
          ]
        },
        "adapter_name": {
          "title": "Adapter name",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "adapter_base": {
          "title": "Adapter base",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "adapter_description": {
          "title": "Adapter description",
          "type": "string",
          "x-nullable": true
        },
        "adapter_version": {
          "title": "Adapter version",
          "type": "string",
          "maxLength": 16,
          "minLength": 1
        },
        "adapter_lib_directory": {
          "title": "Adapter lib directory",
          "type": "string",
          "maxLength": 256,
          "minLength": 1
        },
        "adapter_class": {
          "title": "Adapter class",
          "type": "string",
          "maxLength": 256,
          "minLength": 1
        },
        "datasource_property_descriptions": {
          "title": "Datasource property descriptions",
          "type": "object"
        },
        "datastore_property_descriptions": {
          "title": "Datastore property descriptions",
          "type": "object"
        },
        "vendor_name": {
          "title": "Vendor name",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "vendor_product_name": {
          "title": "Vendor product name",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "vendor_product_version": {
          "title": "Vendor product version",
          "type": "string",
          "maxLength": 16,
          "minLength": 1
        },
        "transform_dialect": {
          "title": "Transform dialect",
          "type": "string",
          "maxLength": 16,
          "minLength": 1,
          "x-nullable": true
        },
        "transform_dialect_version": {
          "title": "Transform dialect version",
          "type": "string",
          "maxLength": 8,
          "minLength": 1,
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "Datastore": {
      "required": [
        "adapter",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "adapter": {
          "title": "Adapter",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "properties": {
          "type": "array",
          "items": {
            "required": [
              "key",
              "value",
              "datastore"
            ],
            "type": "object",
            "properties": {
              "id": {
                "title": "ID",
                "type": "integer",
                "readOnly": true
              },
              "key": {
                "title": "Key",
                "type": "string",
                "maxLength": 64,
                "minLength": 1
              },
              "value": {
                "title": "Value",
                "type": "string"
              },
              "datastore": {
                "title": "Datastore",
                "type": "integer"
              }
            }
          },
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatastoreProperty": {
      "required": [
        "datastore",
        "key",
        "value"
      ],
      "type": "object",
      "properties": {
        "datastore": {
          "title": "Datastore",
          "type": "integer"
        },
        "key": {
          "title": "Key",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "value": {
          "title": "Value",
          "type": "string"
        }
      }
    },
    "FeedEvent": {
      "required": [
        "event_category",
        "event_timestamp"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "event_category": {
          "title": "Event category",
          "type": "string",
          "maxLength": 32,
          "minLength": 1
        },
        "event_timestamp": {
          "title": "Event timestamp",
          "type": "string",
          "format": "date-time"
        },
        "event_date": {
          "title": "Event date",
          "type": "string",
          "readOnly": true
        },
        "user_name": {
          "title": "User name",
          "type": "string",
          "readOnly": true
        },
        "object_id": {
          "title": "Object id",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "object_name": {
          "title": "Object name",
          "type": "string",
          "x-nullable": true
        },
        "object_type": {
          "title": "Object type",
          "type": "string",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FeedActiveUser": {
      "required": [
        "username",
        "count"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "minLength": 1
        },
        "count": {
          "title": "Count",
          "type": "integer"
        }
      }
    },
    "LineageFileDetails": {
      "required": [
        "filename",
        "file_size"
      ],
      "type": "object",
      "properties": {
        "filename": {
          "title": "Filename",
          "type": "string",
          "minLength": 1
        },
        "file_mtime": {
          "title": "File mtime",
          "type": "integer",
          "maximum": 9223372036854775807,
          "minimum": -9223372036854775808,
          "x-nullable": true
        },
        "file_size": {
          "title": "File size",
          "type": "integer",
          "maximum": 9223372036854775807,
          "minimum": -9223372036854775808
        }
      }
    },
    "LineageFilesetDetail": {
      "required": [
        "file_details"
      ],
      "type": "object",
      "properties": {
        "format": {
          "title": "Format",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "generated_on": {
          "title": "Generated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "file_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineageFileDetails"
          }
        },
        "valid": {
          "title": "Valid",
          "type": "boolean"
        }
      }
    },
    "JWTRequest": {
      "required": [
        "username",
        "password"
      ],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "GlossaryMini": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "title": {
          "title": "Title",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Group": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 80,
          "minLength": 1
        }
      }
    },
    "DatasetRecommendationForJob": {
      "required": [
        "rhs_datasets",
        "join_condition",
        "join_type",
        "id"
      ],
      "type": "object",
      "properties": {
        "count": {
          "title": "Count",
          "type": "integer",
          "readOnly": true
        },
        "rhs_datasets": {
          "title": "Rhs datasets",
          "type": "string",
          "minLength": 1
        },
        "join_condition": {
          "title": "Join condition",
          "type": "string",
          "minLength": 1
        },
        "join_type": {
          "title": "Join type",
          "type": "string",
          "minLength": 1
        },
        "id": {
          "title": "Id",
          "type": "integer"
        }
      }
    },
    "JoinRecommendationForJob": {
      "required": [
        "join_condition",
        "join_type"
      ],
      "type": "object",
      "properties": {
        "count": {
          "title": "Count",
          "type": "integer",
          "readOnly": true
        },
        "join_condition": {
          "title": "Join condition",
          "type": "string",
          "minLength": 1
        },
        "join_type": {
          "title": "Join type",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "JobTypeProperty": {
      "required": [
        "key",
        "value"
      ],
      "type": "object",
      "properties": {
        "key": {
          "title": "Key",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "value": {
          "title": "Value",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "JobType": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "subtype": {
          "title": "Subtype",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "JobOutputPoly": {
      "type": "object",
      "properties": {}
    },
    "JobWithOutputs": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "type": {
          "title": "Type",
          "type": "integer"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "string"
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        },
        "jira_references": {
          "title": "Jira references",
          "type": "string",
          "readOnly": true
        },
        "default_output": {
          "title": "Default output",
          "type": "string",
          "readOnly": true
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOutputPoly"
          },
          "readOnly": true
        }
      }
    },
    "JobExportMeta": {
      "title": "Meta",
      "required": [
        "server",
        "schema",
        "commit",
        "compat"
      ],
      "type": "object",
      "properties": {
        "server": {
          "title": "Server",
          "type": "string",
          "minLength": 1
        },
        "schema": {
          "title": "Schema",
          "type": "string",
          "minLength": 1
        },
        "commit": {
          "title": "Commit",
          "type": "string",
          "minLength": 1
        },
        "compat": {
          "title": "Compat",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "JobData": {
      "required": [
        "id",
        "name",
        "type",
        "description",
        "data",
        "complete"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "title": "Type",
          "type": "integer"
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "data": {
          "title": "Data",
          "type": "string",
          "minLength": 1
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "outputs": {
          "title": "Outputs",
          "type": "object",
          "default": [],
          "x-nullable": true
        }
      }
    },
    "JobDependentObject": {
      "required": [
        "id",
        "parent",
        "job_key",
        "in_jobs",
        "name_at_source",
        "name_at_destination"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer"
        },
        "parent": {
          "title": "Parent",
          "type": "integer"
        },
        "job_key": {
          "title": "Job key",
          "type": "string",
          "minLength": 1
        },
        "in_jobs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name_at_source": {
          "title": "Name at source",
          "type": "string",
          "minLength": 1
        },
        "name_at_destination": {
          "title": "Name at destination",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "JobExportDependentObjects": {
      "title": "Dependents",
      "required": [
        "columns",
        "datasets",
        "sources",
        "stores"
      ],
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobDependentObject"
          }
        },
        "datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobDependentObject"
          }
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobDependentObject"
          }
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobDependentObject"
          }
        }
      }
    },
    "JobExport": {
      "required": [
        "meta",
        "jobs",
        "dependents"
      ],
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/JobExportMeta"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobData"
          }
        },
        "dependents": {
          "$ref": "#/definitions/JobExportDependentObjects"
        }
      }
    },
    "JobExecutorCompatibility": {
      "type": "object",
      "properties": {
        "aqs_compatible": {
          "title": "Aqs compatible",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "JobOutputMapping": {
      "required": [
        "output",
        "lhs_col_name",
        "lhs_col_position",
        "rhs_col_name",
        "rhs_col_position"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "output": {
          "title": "Output",
          "type": "integer"
        },
        "lhs_col_name": {
          "title": "Lhs col name",
          "type": "string",
          "minLength": 1
        },
        "lhs_col_position": {
          "title": "Lhs col position",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "rhs_col": {
          "title": "Rhs col",
          "type": "string",
          "x-nullable": true
        },
        "rhs_col_name": {
          "title": "Rhs col name",
          "type": "string",
          "minLength": 1
        },
        "rhs_col_position": {
          "title": "Rhs col position",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648
        },
        "rhs_col_index": {
          "title": "Rhs col index",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        }
      }
    },
    "JobRevision": {
      "required": [
        "job",
        "revision"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "job": {
          "title": "Job",
          "type": "integer"
        },
        "revision": {
          "title": "Revision",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "revision_comment": {
          "title": "Revision comment",
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "title": "Type",
          "type": "integer"
        },
        "data": {
          "title": "Data",
          "type": "string"
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "jira_references": {
          "type": "array",
          "items": {
            "title": "Jira references",
            "type": "string",
            "minLength": 1
          },
          "x-nullable": true
        },
        "outputs": {
          "title": "Outputs",
          "type": "object"
        },
        "default_output": {
          "title": "Default output",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JobRevisionDiff": {
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true
        },
        "filter": {
          "title": "Filter",
          "type": "string",
          "readOnly": true
        },
        "datasets": {
          "title": "Datasets",
          "type": "string",
          "readOnly": true
        },
        "projections": {
          "title": "Projections",
          "type": "string",
          "readOnly": true
        },
        "aggs": {
          "title": "Aggs",
          "type": "string",
          "readOnly": true
        },
        "joins": {
          "title": "Joins",
          "type": "string",
          "readOnly": true
        },
        "groupby": {
          "title": "Groupby",
          "type": "string",
          "readOnly": true
        },
        "aliases": {
          "title": "Aliases",
          "type": "string",
          "readOnly": true
        },
        "selectedColumns": {
          "title": "Selectedcolumns",
          "type": "string",
          "readOnly": true
        },
        "output": {
          "title": "Output",
          "type": "string",
          "readOnly": true
        },
        "targetMapping": {
          "title": "Targetmapping",
          "type": "string",
          "readOnly": true
        },
        "error_logging": {
          "title": "Error logging",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TransformationQuery": {
      "type": "object",
      "properties": {
        "dialect": {
          "title": "Dialect",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "query": {
          "title": "Query",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "is_valid": {
          "title": "Is valid",
          "type": "boolean",
          "readOnly": true
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "readOnly": true
        }
      }
    },
    "JoinRecommendation": {
      "required": [
        "lhs_datasets",
        "rhs_datasets",
        "join_condition",
        "join_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "lhs_datasets": {
          "title": "Lhs datasets",
          "type": "string",
          "minLength": 1
        },
        "rhs_datasets": {
          "title": "Rhs datasets",
          "type": "string",
          "minLength": 1
        },
        "join_condition": {
          "title": "Join condition",
          "type": "string",
          "minLength": 1
        },
        "join_type": {
          "title": "Join type",
          "type": "string",
          "minLength": 1
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LineageDerivedDatasetRevision": {
      "title": "Lineage details",
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "columns": {
          "title": "Columns",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LineageOutput": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Lineage": {
      "required": [
        "lineage_details",
        "outputs",
        "transform_start_time",
        "transform_end_time"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "job_data": {
          "title": "Job data",
          "type": "string",
          "readOnly": true
        },
        "datasets": {
          "title": "Datasets",
          "type": "string",
          "readOnly": true
        },
        "lineage_details": {
          "$ref": "#/definitions/LineageDerivedDatasetRevision"
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineageOutput"
          }
        },
        "valid": {
          "title": "Valid",
          "type": "boolean"
        },
        "group_bys": {
          "title": "Group bys",
          "type": "string",
          "readOnly": true
        },
        "filters": {
          "title": "Filters",
          "type": "string",
          "readOnly": true
        },
        "joins": {
          "title": "Joins",
          "type": "string",
          "readOnly": true
        },
        "transform_start_time": {
          "title": "Transform start time",
          "type": "string",
          "format": "date-time"
        },
        "transform_end_time": {
          "title": "Transform end time",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MetadataExport": {
      "type": "object",
      "properties": {
        "ds_list": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          }
        },
        "col_list": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          }
        },
        "val_list": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 1
          }
        }
      }
    },
    "NotificationType": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "notification_name": {
          "title": "Notification name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "recipient": {
          "title": "Recipient",
          "type": "string",
          "readOnly": true
        },
        "notification_type": {
          "title": "Notification type",
          "type": "string",
          "readOnly": true
        },
        "read": {
          "title": "Read",
          "type": "boolean"
        },
        "status": {
          "title": "Status",
          "type": "string"
        },
        "object_id": {
          "title": "Object id",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": -2147483648,
          "x-nullable": true
        },
        "object_name": {
          "title": "Object name",
          "type": "string",
          "x-nullable": true
        },
        "object_type": {
          "title": "Object type",
          "type": "string",
          "readOnly": true
        },
        "details": {
          "title": "Details",
          "type": "object",
          "x-nullable": true
        },
        "generated_by": {
          "title": "Generated by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "PiiRule": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "column_name_keyword": {
          "title": "Column name keyword",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "data_type": {
          "title": "Data type",
          "type": "integer",
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "is_pii": {
          "title": "Is pii",
          "type": "boolean"
        },
        "masking_function": {
          "title": "Masking function",
          "type": "object",
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "is_core": {
          "title": "Is core",
          "type": "boolean"
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ExecutorPlugin": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "uid": {
          "title": "Uid",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "plugin_name": {
          "title": "Plugin name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "namespace": {
          "title": "Namespace",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "version": {
          "title": "Version",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "is_installed": {
          "title": "Is installed",
          "type": "boolean",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        }
      }
    },
    "RecycleBin": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "item_deleted_by": {
          "title": "Item deleted by",
          "type": "string",
          "readOnly": true
        },
        "item_deleted_on": {
          "title": "Item deleted on",
          "type": "string",
          "readOnly": true
        },
        "item_created_by": {
          "title": "Item created by",
          "type": "string",
          "readOnly": true
        },
        "item_created_on": {
          "title": "Item created on",
          "type": "string",
          "readOnly": true
        },
        "item_type": {
          "title": "Item type",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DeletedObject": {
      "required": [
        "delete_operation_id",
        "item_type"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "delete_operation_id": {
          "title": "Delete operation id",
          "type": "integer"
        },
        "delete_order": {
          "title": "Delete order",
          "type": "integer",
          "maximum": 2147483647,
          "minimum": 0
        },
        "item_type": {
          "title": "Item type",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "x-nullable": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "user_visible": {
          "title": "User visible",
          "type": "boolean"
        }
      }
    },
    "RefreshJWTRequest": {
      "type": "object",
      "properties": {
        "refresh_token": {
          "title": "Refresh token",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "id": {
          "title": "ID",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "is_builtin": {
          "title": "Is builtin",
          "type": "boolean",
          "readOnly": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "adapter_perms": {
          "type": "array",
          "items": {
            "title": "Adapter perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "datastore_perms": {
          "type": "array",
          "items": {
            "title": "Datastore perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "datasource_perms": {
          "type": "array",
          "items": {
            "title": "Datasource perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "dataset_perms": {
          "type": "array",
          "items": {
            "title": "Dataset perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "data_content_perms": {
          "type": "array",
          "items": {
            "title": "Data content perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ]
          },
          "maxItems": 3
        },
        "metadata_perms": {
          "type": "array",
          "items": {
            "title": "Metadata perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "udt_perms": {
          "type": "array",
          "items": {
            "title": "Udt perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "os_job_perms": {
          "type": "array",
          "items": {
            "title": "Os job perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "transform_job_perms": {
          "type": "array",
          "items": {
            "title": "Transform job perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "workflow_perms": {
          "type": "array",
          "items": {
            "title": "Workflow perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "schedule_perms": {
          "type": "array",
          "items": {
            "title": "Schedule perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "activity_perms": {
          "type": "array",
          "items": {
            "title": "Activity perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "member_perms": {
          "type": "array",
          "items": {
            "title": "Member perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "permission_perms": {
          "type": "array",
          "items": {
            "title": "Permission perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "role_perms": {
          "type": "array",
          "items": {
            "title": "Role perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "trash_perms": {
          "type": "array",
          "items": {
            "title": "Trash perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "search_perms": {
          "type": "array",
          "items": {
            "title": "Search perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "profile_perms": {
          "type": "array",
          "items": {
            "title": "Profile perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "setting_perms": {
          "type": "array",
          "items": {
            "title": "Setting perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "dashboard_perms": {
          "type": "array",
          "items": {
            "title": "Dashboard perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "bi_explorer_perms": {
          "type": "array",
          "items": {
            "title": "Bi explorer perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "notification_perms": {
          "type": "array",
          "items": {
            "title": "Notification perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        },
        "glossary_perms": {
          "type": "array",
          "items": {
            "title": "Glossary perms",
            "type": "string",
            "enum": [
              "Y",
              "N",
              "O"
            ],
            "x-nullable": true
          },
          "maxItems": 4
        }
      }
    },
    "LatestScheduleActivityList": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "schedule": {
          "title": "Schedule",
          "type": "integer"
        },
        "schedule_name": {
          "title": "Schedule name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string"
        },
        "start_time": {
          "title": "Start time",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "successful": {
          "title": "Successful",
          "type": "boolean",
          "x-nullable": true
        },
        "manually_executed": {
          "title": "Manually executed",
          "type": "boolean"
        },
        "workflow": {
          "title": "Workflow",
          "type": "integer",
          "readOnly": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ScheduleActivity": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "schedule": {
          "title": "Schedule",
          "type": "integer"
        },
        "schedule_name": {
          "title": "Schedule name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "status": {
          "title": "Status",
          "type": "string"
        },
        "start_time": {
          "title": "Start time",
          "type": "string",
          "format": "date-time"
        },
        "end_time": {
          "title": "End time",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "successful": {
          "title": "Successful",
          "type": "boolean",
          "x-nullable": true
        },
        "manually_executed": {
          "title": "Manually executed",
          "type": "boolean"
        },
        "detail": {
          "title": "Detail",
          "type": "string",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "workflow": {
          "title": "Workflow",
          "type": "integer",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "WorkflowScheduleList": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "workflow": {
          "title": "Workflow",
          "type": "integer"
        },
        "workflow_name": {
          "title": "Workflow name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "minute": {
          "title": "Minute",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "hour": {
          "title": "Hour",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_week": {
          "title": "Day of week",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_month": {
          "title": "Day of month",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "month_of_year": {
          "title": "Month of year",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "type": "boolean"
        },
        "expires": {
          "title": "Expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "string",
          "x-nullable": true
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        }
      }
    },
    "SearchDataImport": {
      "required": [
        "command",
        "core",
        "age",
        "start_time",
        "end_time",
        "entities"
      ],
      "type": "object",
      "properties": {
        "command": {
          "title": "Command",
          "type": "string",
          "enum": [
            "full-import",
            "delta-import"
          ]
        },
        "core": {
          "title": "Core",
          "type": "string",
          "minLength": 1
        },
        "clean": {
          "title": "Clean",
          "type": "boolean",
          "default": false
        },
        "commit": {
          "title": "Commit",
          "type": "boolean",
          "default": true
        },
        "debug": {
          "title": "Debug",
          "type": "boolean",
          "default": false
        },
        "workers": {
          "title": "Workers",
          "type": "integer",
          "default": 0
        },
        "batch": {
          "title": "Batch",
          "type": "integer",
          "default": 0
        },
        "age": {
          "title": "Age",
          "type": "integer"
        },
        "start_time": {
          "title": "Start time",
          "type": "string"
        },
        "end_time": {
          "title": "End time",
          "type": "string"
        },
        "entities": {
          "title": "Entities",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Expression": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string",
          "minLength": 1,
          "x-nullable": true
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "type": {
          "title": "Type",
          "type": "string",
          "maxLength": 64,
          "minLength": 1
        },
        "parsed_expression": {
          "title": "Parsed expression",
          "type": "object",
          "x-nullable": true
        },
        "non_parsed_expression": {
          "title": "Non parsed expression",
          "type": "string",
          "x-nullable": true
        },
        "details": {
          "title": "Details",
          "type": "object",
          "x-nullable": true
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "readOnly": true,
          "uniqueItems": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Sentence": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "text": {
          "title": "Text",
          "type": "string",
          "x-nullable": true
        },
        "parse": {
          "title": "Parse",
          "type": "object",
          "x-nullable": true
        },
        "pinned": {
          "title": "Pinned",
          "type": "boolean"
        },
        "parse_normalized": {
          "title": "Parse normalized",
          "type": "string",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        }
      }
    },
    "Adapter": {
      "required": [
        "adapter_base",
        "adapter_category",
        "vendor_product_version",
        "is_installed",
        "vendor_product_name",
        "adapter_name"
      ],
      "type": "object",
      "properties": {
        "adapter_base": {
          "title": "Base name of the adapter",
          "type": "string",
          "minLength": 1,
          "example": "Amazon_S3"
        },
        "adapter_category": {
          "title": "Category of the adapter",
          "type": "string",
          "enum": [
            "FILESYSTEM, DATABASE, SERVICE"
          ],
          "example": "FILESYSTEM"
        },
        "vendor_product_version": {
          "title": "Vendor version",
          "type": "string",
          "minLength": 1,
          "example": "1.9.9"
        },
        "is_installed": {
          "title": "Boolean indicating whether the adapter is installed in this instance of DCP",
          "type": "boolean",
          "example": "true"
        },
        "vendor_product_name": {
          "title": "Vendor Product Name",
          "type": "string",
          "minLength": 1,
          "example": "S3"
        },
        "adapter_name": {
          "title": "Human readable name that uniquely identifies the adapter",
          "type": "string",
          "minLength": 1,
          "example": "Amazon S3"
        }
      }
    },
    "TableauGroup": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "source": {
          "title": "Source",
          "type": "integer",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "tableau_id": {
          "title": "Tableau id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "tableau_name": {
          "title": "Tableau name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "tableau_domain": {
          "title": "Tableau domain",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "tableau_group_members": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "readOnly": true,
          "uniqueItems": true
        }
      }
    },
    "TableauUserSource": {
      "required": [
        "tableau_id",
        "tableau_site_role",
        "source"
      ],
      "type": "object",
      "properties": {
        "tableau_id": {
          "title": "Tableau id",
          "type": "string",
          "maxLength": 36,
          "minLength": 1
        },
        "tableau_site_role": {
          "title": "Tableau site role",
          "type": "string",
          "minLength": 1
        },
        "source": {
          "title": "Source",
          "type": "integer"
        }
      }
    },
    "TableauUser": {
      "required": [
        "user_sources",
        "unifi_user"
      ],
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "datastore": {
          "title": "Datastore",
          "type": "integer",
          "readOnly": true
        },
        "user_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableauUserSource"
          }
        },
        "unifi_user": {
          "title": "Unifi user",
          "type": "integer"
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "password": {
          "title": "Password",
          "type": "string",
          "x-nullable": true
        },
        "tableau_name": {
          "title": "Tableau name",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "tableau_last_login": {
          "title": "Tableau last login",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "tableau_external_auth_user_id": {
          "title": "Tableau external auth user id",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        }
      }
    },
    "UnifiSetting": {
      "type": "object",
      "properties": {
        "setting_type": {
          "title": "Setting type",
          "type": "string",
          "maxLength": 10
        },
        "setting_name": {
          "title": "Setting name",
          "type": "string",
          "maxLength": 100
        },
        "setting_description": {
          "title": "Setting description",
          "type": "string",
          "x-nullable": true
        },
        "setting_group": {
          "title": "Setting group",
          "type": "string",
          "maxLength": 30
        },
        "setting_sub_group": {
          "title": "Setting sub group",
          "type": "string",
          "maxLength": 30,
          "x-nullable": true
        },
        "setting_value": {
          "title": "Setting value",
          "type": "string",
          "x-nullable": true
        },
        "setting_enc_value": {
          "title": "Setting enc value",
          "type": "string",
          "x-nullable": true
        },
        "setting_choices": {
          "type": "array",
          "items": {
            "title": "Setting choices",
            "type": "string",
            "maxLength": 32
          },
          "x-nullable": true
        },
        "setting_label": {
          "title": "Setting label",
          "type": "string",
          "maxLength": 255,
          "x-nullable": true
        },
        "setting_requires_restart": {
          "title": "Setting requires restart",
          "type": "boolean"
        }
      }
    },
    "UnifiSettingsUpdate": {
      "required": [
        "data"
      ],
      "type": "object",
      "properties": {
        "data": {
          "title": "Data",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    },
    "UnifiSettingsRead": {
      "type": "object",
      "properties": {
        "setting_type": {
          "title": "Setting type",
          "type": "string",
          "maxLength": 10
        },
        "setting_name": {
          "title": "Setting name",
          "type": "string",
          "maxLength": 100
        },
        "setting_description": {
          "title": "Setting description",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "setting_group": {
          "title": "Setting group",
          "type": "string",
          "maxLength": 30
        },
        "setting_sub_group": {
          "title": "Setting sub group",
          "type": "string",
          "maxLength": 30,
          "x-nullable": true
        },
        "setting_value": {
          "title": "Setting value",
          "type": "string",
          "x-nullable": true
        },
        "setting_enc_value": {
          "title": "Setting enc value",
          "type": "string",
          "x-nullable": true
        },
        "setting_choices": {
          "type": "array",
          "items": {
            "title": "Setting choices",
            "type": "string",
            "maxLength": 32
          },
          "x-nullable": true
        },
        "setting_label": {
          "title": "Setting label",
          "type": "string",
          "readOnly": true,
          "minLength": 1
        },
        "setting_requires_restart": {
          "title": "Setting requires restart",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "UserTransferOwnership": {
      "required": [
        "transfer_to_user"
      ],
      "type": "object",
      "properties": {
        "transfer_to_user": {
          "title": "Transfer to user",
          "type": "integer"
        }
      }
    },
    "VerifyJWTRequest": {
      "required": [
        "token"
      ],
      "type": "object",
      "properties": {
        "token": {
          "title": "Token",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ScheduleJobOutputs": {
      "required": [
        "job",
        "output"
      ],
      "type": "object",
      "properties": {
        "job": {
          "title": "Job",
          "type": "integer"
        },
        "output": {
          "title": "Output",
          "type": "integer"
        }
      }
    },
    "WorkflowSchedule": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "workflow": {
          "title": "Workflow",
          "type": "integer"
        },
        "minute": {
          "title": "Minute",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "hour": {
          "title": "Hour",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_week": {
          "title": "Day of week",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "day_of_month": {
          "title": "Day of month",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "month_of_year": {
          "title": "Month of year",
          "type": "string",
          "maxLength": 64,
          "x-nullable": true
        },
        "enabled": {
          "title": "Enabled",
          "type": "boolean"
        },
        "expires": {
          "title": "Expires",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "string",
          "x-nullable": true
        },
        "complete": {
          "title": "Complete",
          "type": "boolean"
        },
        "email_notify_list": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "default": []
        },
        "slack_notify_list": {
          "type": "array",
          "items": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1
          },
          "default": []
        },
        "notify_on": {
          "title": "Notify on",
          "type": "string",
          "enum": [
            "All",
            "On Success",
            "On Failure"
          ],
          "x-nullable": true
        },
        "num_runs": {
          "title": "Num runs",
          "type": "string",
          "readOnly": true
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleJobOutputs"
          },
          "readOnly": true
        }
      }
    },
    "Workflow": {
      "type": "object",
      "properties": {
        "id": {
          "title": "Id",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string",
          "x-nullable": true
        },
        "data": {
          "title": "Data",
          "type": "string"
        },
        "created_by": {
          "title": "Created by",
          "type": "string",
          "readOnly": true
        },
        "created_on": {
          "title": "Created on",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "last_updated_by": {
          "title": "Last updated by",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "last_updated_on": {
          "title": "Last updated on",
          "type": "string",
          "format": "date-time",
          "x-nullable": true
        },
        "is_owner": {
          "title": "Is owner",
          "type": "string",
          "readOnly": true
        },
        "has_permissions": {
          "title": "Has permissions",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "title": "Tags",
            "type": "string",
            "maxLength": 32,
            "minLength": 1
          },
          "x-nullable": true
        },
        "deleting": {
          "title": "Deleting",
          "type": "string",
          "readOnly": true
        }
      }
    }
  }
}